<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life is a Journey</title>
  
  <subtitle>陌上花开~ | 可缓缓归矣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nonsense-j.top/"/>
  <updated>2021-03-24T00:48:30.994Z</updated>
  <id>https://nonsense-j.top/</id>
  
  <author>
    <name>Nonsense</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>成都印象</title>
    <link href="https://nonsense-j.top/2021/03/21/%E6%88%90%E9%83%BD%E5%8D%B0%E8%B1%A1/"/>
    <id>https://nonsense-j.top/2021/03/21/%E6%88%90%E9%83%BD%E5%8D%B0%E8%B1%A1/</id>
    <published>2021-03-21T12:26:11.000Z</published>
    <updated>2021-03-24T00:48:30.994Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>简单记录一下成都之行的快乐时光 &gt;qwq&lt; ~~</p></div><a id="more"></a><h2 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h2><p>&emsp;&emsp;<del>成都培训</del>（公费旅游，bushi），虽然这一次去成都不算真正的旅游，但也逛了一下锦里，看了大熊猫，而且川菜确实好吃！打卡都是一个人去的，挺好的。。。</p><p>&emsp;&emsp;成都气候很好，白天基本没下过雨，套件卫衣出门很巴适，郊区可以骑电动自行车，但是市区只能骑脚蹬自行车，用出租车司机的话来说就是要是有电动车，出租网约就都可以倒闭罢工了hh。</p><p>&emsp;&emsp;成都确实不算很大，市中心人流量也还行，建筑不算很密集，确实宜居，貌似今年还会开国际大学生夏季运动会。</p><h2 id="住宿"><a href="#住宿" class="headerlink" title="住宿"></a>住宿</h2><h3 id="民宿"><a href="#民宿" class="headerlink" title="民宿"></a>民宿</h3><p>&emsp;&emsp;前两天住的是一个环境很不错的民宿类酒店，窗外是小溪，门前是一个小湖泊，旁边还有一个喝咖啡茶水的小酒吧（虽然也算不上，毕竟太小了），就是位置太偏了（离培训的地方近），房源20里竟连KFC都莫得。</p><p>酒店前面的景观湖泊，有鱼有鸟：<br><img alt="成都-酒店总体" width="67%" data-src="https://tvax1.sinaimg.cn/mw690/007EYOWmly1gotvux9vn8j31400u0dn9.jpg"></p><p>房间上面的小草地，中间那个貌似是主题房，离谱：<br><img alt="成都-酒店环境" width="67%" data-src="https://tvax2.sinaimg.cn/mw690/007EYOWmly1gotvuvzfw9j31400u0grc.jpg"></p><p>房间内部，灯太暗了，晚上有飞虫，还好不叮人，这个就不po图了，毕竟酒店都差不多。</p><h3 id="公寓"><a href="#公寓" class="headerlink" title="公寓"></a>公寓</h3><p>&emsp;&emsp;培训完在市区找的一家公寓类酒店，能够直接俯视到市中心，就是楼层不太高，可惜了，三卧，地理位置和景观决定了高得离谱的价格，希望能报销，不然我就真得吃土了。。。ps：梦想的套房，要是我以后小有资产了必在成都买一个这样的套房www。<br><img alt="公寓内景" width="67%" data-src="https://tvax2.sinaimg.cn/mw690/007EYOWmly1gotvuxy7duj314g0u0gpb.jpg"></p><h2 id="打卡-锦里"><a href="#打卡-锦里" class="headerlink" title="打卡 - 锦里"></a>打卡 - 锦里</h2><p>&emsp;&emsp;打出租车过去的，人挺多的，十字路口就是正门，可惜旁边的武侯祠关门了，害：<br><img alt="锦里-正门" width="67%" data-src="https://tva3.sinaimg.cn/mw690/007EYOWmly1gotvv0uqdjj31400u0jwa.jpg"></p><p>&emsp;&emsp;锦里就是逛街的地方，物价偏高，秉承着节约的传统美德，我就是走走停停看看风景，这里的建筑都挺民间的，有那种乡里气息hh。我大概看见了三个有驻唱歌手的小酒馆，两个是弹唱吉他，一个是弹琴，而且被安利了李宗盛的《山丘》，太好听了！</p><div class="table-container"><table><thead><tr><th style="text-align:center">锦里街头夜景</th><th style="text-align:center">锦里小酒馆</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="锦里-街头" width="90%" data-src="https://tvax3.sinaimg.cn/mw690/007EYOWmly1gotrw11xyfj32bc334u12.jpg"></td><td style="text-align:center"><img alt="锦里-小酒馆" width="90%" data-src="https://tvax1.sinaimg.cn/mw690/007EYOWmly1gotvuzzgckj30u01400wi.jpg"></td></tr></tbody></table></div><p>&emsp;&emsp;然后路边还有一些供旅客参观的小景点，宋代石刻没什么人看（<del>这物欲横流的社会，bushi</del>），再加上我就一个人，所以我没敢往里走，虽然里面有灯，但毕竟男孩子在外面要保护好自己hhh：</p><div class="table-container"><table><thead><tr><th style="text-align:center">貌似是宋代石刻</th><th style="text-align:center">山水石雕和字画</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="锦里-宋石刻" width="90%" data-src="https://tvax3.sinaimg.cn/mw690/007EYOWmly1gotvuzarsej30u0140dj1.jpg"></td><td style="text-align:center"><img alt="锦里-字画1" width="90%" data-src="https://tvax3.sinaimg.cn/mw690/007EYOWmly1gotvv1tyzvj30u0140af2.jpg"></td></tr></tbody></table></div><p>&emsp;&emsp;我觉得最好看最有意境的就是这个山水雕塑和字画的，在一个小巷子里，进去就能看到，雾气恰到好处，虽然我是一介俗人：<br><img alt="锦里-字画2" width="70%" data-src="https://tva1.sinaimg.cn/mw690/007EYOWmly1gotvv2tx9mj31400u0q7g.jpg"></p><p>&emsp;&emsp;锦里不大，相比于武侯祠，锦里就像是旁边一个小巷子，所以我就逛了一个小时，印象最深的还是驻场的酒馆，真羡慕它们的生活，虽然知道他们也是为生活和理想奔波，可还是羡慕他们作者自己热爱的事情。</p><h2 id="打卡-玉林路"><a href="#打卡-玉林路" class="headerlink" title="打卡 - 玉林路"></a>打卡 - 玉林路</h2><p>&emsp;&emsp;成都之行最敷衍的打卡，从锦里回公寓我绕了一下，先骑自行车去了玉林路。去的时候是九点多，人不算多，那里最近貌似在装修，建筑风格也是很老旧那种，一条街都是酒吧（基本都不是现代化装修），像我这样的三好青年肯定是不会进去的（/手动狗头）。我就直接从玉林西路骑进去，从东路出了。</p><p>&emsp;&emsp;后果就是那天我骑了一个半小时，巨累。。。。这波是自己折磨自己。</p><h2 id="打卡-熊猫培育基地"><a href="#打卡-熊猫培育基地" class="headerlink" title="打卡 - 熊猫培育基地"></a>打卡 - 熊猫培育基地</h2><p>&emsp;&emsp;很庆幸自己那天中午吃完兔头，果断决定跑去熊猫培育基地，确实不虚此行。去得时候人不多，天气巨好，就是位置有点偏，坐车做了挺久的，一个人逛完了全程，很快乐（就是有点累脚）。</p><p>&emsp;&emsp;一下车就能看见，毕竟那里就这一个建筑，duang：<br><img alt="熊猫-正门" width="67%" data-src="https://tvax1.sinaimg.cn/mw690/007EYOWmly1gotvvhcgsyj31400u0q7f.jpg"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><p>&emsp;&emsp;毕竟也是一个4A级景区，环境还是很好的，最喜欢那种树荫下的小道还有那一条天鹅湖旁边的花道：</p><div class="table-container"><table><thead><tr><th style="text-align:center">景区小路</th><th style="text-align:center">天鹅湖旁边花道</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="熊猫-街边" width="90%" data-src="https://tvax1.sinaimg.cn/mw690/007EYOWmly1gotvv5ean2j30u01407as.jpg"></td><td style="text-align:center"><img alt="熊猫-花道" width="90%" data-src="https://tva1.sinaimg.cn/mw690/007EYOWmly1gotvv48glkj30u0140125.jpg"></td></tr></tbody></table></div><p>&emsp;&emsp;孔雀貌似是不伤人的，所以路上，熊猫活动场都能看见，没看见开屏，毕竟这东西可遇不可求，在树林里有一家熊猫时光咖啡屋：</p><div class="table-container"><table><thead><tr><th style="text-align:center">路边孔雀</th><th style="text-align:center">熊猫时光咖啡屋</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="熊猫-孔雀" width="90%" data-src="https://tva1.sinaimg.cn/mw690/007EYOWmly1gotvv84kj0j30u0140doj.jpg"></td><td style="text-align:center"><img alt="熊猫-熊猫时光咖啡屋" width="90%" data-src="https://tva4.sinaimg.cn/mw690/007EYOWmly1gotvvgihh3j30u0140qaj.jpg"></td></tr></tbody></table></div><h3 id="大熊猫"><a href="#大熊猫" class="headerlink" title="大熊猫"></a>大熊猫</h3><p>&emsp;&emsp;园区有很多熊猫活动场，按照年龄分的，能看见的大熊猫基本就只有两个行为：</p><p><strong>吃：</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">独自进食</th><th style="text-align:center">双倍快乐</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="熊猫-啃竹子" width="90%" data-src="https://tva2.sinaimg.cn/mw690/007EYOWmly1gotvv6l1mxj30u01400zf.jpg"></td><td style="text-align:center"><img alt="熊猫-双倍快乐" width="90%" data-src="https://tvax4.sinaimg.cn/mw690/007EYOWmly1gotvva20pvj30u0140dqg.jpg"></td></tr></tbody></table></div><p>&emsp;&emsp;只要一开始吃大熊猫的眼里基本只有竹子，完全不理会旁边驻足的旅客，这才是大智慧hh。</p><p><strong>睡：</strong><br><img alt="熊猫-睡觉" width="70%" data-src="https://tvax4.sinaimg.cn/mw690/007EYOWmly1gotvvbgmz4j31400u0tgx.jpg"></p><p>&emsp;&emsp;很明显，这棵树就是为了让这厮睡觉长得，我只能说太安逸了，羡慕。</p><p>&emsp;&emsp;看大熊猫是真的治愈，主要是太慵懒了，干啥都不紧不慢，走路一扭一扭的hhh。而且这就是我梦想的生活方式，吃了睡，睡了吃，还有人供着，羡慕。希望来生我也能当只快乐的大熊猫。ps，还拍了一些视频，就不放博客了。</p><h3 id="小熊猫"><a href="#小熊猫" class="headerlink" title="小熊猫"></a>小熊猫</h3><p>&emsp;&emsp;小熊猫貌似是大熊猫的伴生动物，体型更像狐狸和猫，没有大熊猫那么憨，而且好看，i了i了。<br><img alt="熊猫-小熊猫介绍牌" width="67%" data-src="https://tva4.sinaimg.cn/mw690/007EYOWmly1gotvvf88rcj31400u0jyn.jpg"><br>往里走就是小熊猫的活动场，比大熊猫少一点，而且大部分小熊猫都往树林里面跑了：</p><div class="table-container"><table><thead><tr><th style="text-align:center">确实可爱</th><th style="text-align:center">藏了一只</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="熊猫-小熊猫" width="90%" data-src="https://tvax1.sinaimg.cn/mw690/007EYOWmly1gotvve5pehj30u0140gum.jpg"></td><td style="text-align:center"><img alt="熊猫-小熊猫2" width="90%" data-src="https://tvax3.sinaimg.cn/mw690/007EYOWmly1gotxzqvgknj30u014011e.jpg"></td></tr></tbody></table></div><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>&emsp;&emsp;还有春熙路，武侯祠没去过，下次去成都不知道会是什么时候，那时候可能我博客都荒废了吧hh，不过这次还是很开兴的。现在回学校了，老老实实收心搞学习了。</p><details><summary>碎碎念</summary>&emsp;&emsp;这一次成都之行去之前其实还挺犹豫的，毕竟现在是大三，要忙考研保研的事情，而且课程也比较累，而这次也不是去参加什么竞赛，只是去成都参加一个培训，深入了解一下ROS实际开发。最终也是为了散散心，了解一下ROS，定下来去一趟。前两三天在忙培训，最后一天逛了一下成都，这几天说实话，还是很开心的hh。<br>&emsp;&emsp; AmovLab去之前我以为会是一个比较大的公司，到了才知道更像是一个工作室，就一两层的办公空间，员工不多但是分工明确，他们的工作就是吧一下开源的代码用实际的无人车无人机做出来。感觉里面的人都挺忙的，每天都坐在电脑前，有开发的，有p图的，老996公司了hh。<br>&emsp;&emsp; 听完学长的意见，我也感觉ROS这个方面以后要是想做的话，仿真才是王道，关键是好出论文，没有实机那种不确定性。我本来想的是ROS和人工智能机器学习联系起来，现在想想好像就算联系起来目前应用也不多，软工其它方向又太抽象了，太难了。</details><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;简单记录一下成都之行的快乐时光 &amp;gt;qwq&amp;lt; ~~&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="城市印象" scheme="https://nonsense-j.top/categories/%E5%9F%8E%E5%B8%82%E5%8D%B0%E8%B1%A1/"/>
    
    
      <category term="Life" scheme="https://nonsense-j.top/tags/Life/"/>
    
  </entry>
  
  <entry>
    <title>AmovLab培训要点总结</title>
    <link href="https://nonsense-j.top/2021/03/21/AmovLab%E5%9F%B9%E8%AE%AD%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/"/>
    <id>https://nonsense-j.top/2021/03/21/AmovLab%E5%9F%B9%E8%AE%AD%E8%A6%81%E7%82%B9%E6%80%BB%E7%BB%93/</id>
    <published>2021-03-21T12:25:43.000Z</published>
    <updated>2021-03-23T07:17:17.492Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本次参加AmovLab关于无人机以及无人车的培训，对ROS实现自动化无人机有了更深入的了解，此博客记录主要记录实体样机的使用以及组成。</p></div><a id="more"></a><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>其实不论是无人机还是无人车，是有很多共同的地方的，以下进行简单罗列：</p><ul><li>都使用飞控进行控制，飞控是无人机的大脑，核心，所有的操作最终都是转变为飞控向无人机发送指令，具体来说是控制电机转速。</li><li>都有上位机和下位机之分，简单地来说：上位机就是板载计算机，下位机是飞控。</li><li><code>offboard</code>模式就是使用板载计算机进行控制，更具体地来说是板载计算机（<code>ubuntu</code>）上开启ROS节点（<code>MAVROS</code>），这些节点与飞控之间通过满足<code>MAVLINK</code>协议的数据进行交互，飞控再向无人机的电机发布指令。</li><li>地面站：地面站可以用于指定航点以及制定航线，必须在有GPS信号（室外）的环境下才可以使用。</li><li>怎么定位：<ul><li>在室外一般就是以GPS为主，而且地面站一定要有GPS信号才可以。</li><li>在室内一般用雷达（<code>激光SLAM</code>）或者<code>视觉SLAM</code>（一般使用谷歌的 <code>D435i</code> and <code>T265</code> 实现视觉建图，P600莫得）</li></ul></li><li>更改飞行模式一般有两种方法：<ul><li>使用遥控器，前提是遥控器摇杆对应通道与飞控上<strong>MODE_CH</strong>的对应通道一致，这个一般是可以在地面站上查看以及修改的。</li><li>板载计算机控制时可以修改对应代码来更改飞行模式。</li></ul></li></ul><h2 id="避障方法"><a href="#避障方法" class="headerlink" title="避障方法"></a>避障方法</h2><h3 id="激光雷达避障"><a href="#激光雷达避障" class="headerlink" title="激光雷达避障"></a>激光雷达避障</h3><p><img alt="laser" width="60%" data-src="https://tva1.sinaimg.cn/mw690/007EYOWmly1gott9ql8qpj30lq09taak.jpg"></p><p><strong>优点</strong>：使用雷达，360度，实时性强，稳定，再弱光环境下也可以很好运作。</p><p><strong>缺陷</strong>：比如长廊效应：在一条长廊上，雷达探测范围相对于长廊比较小，因此当无人机在长廊上时无法确定自己的位置，可能会出现问题。</p><h3 id="视觉SLAM避障"><a href="#视觉SLAM避障" class="headerlink" title="视觉SLAM避障"></a>视觉SLAM避障</h3><div class="table-container"><table><thead><tr><th style="text-align:center">英特尔D435i深度相机</th><th style="text-align:center">英特尔T265双目相机</th></tr></thead><tbody><tr><td style="text-align:center"><img alt="D435i" width="90%" data-src="https://tva2.sinaimg.cn/mw690/007EYOWmly1gott9q98snj30mu0eqq3s.jpg"></td><td style="text-align:center"><img alt="T265" data-src="https://tva2.sinaimg.cn/mw690/007EYOWmly1gott9qrfqmj30pb0erwf5.jpg"></td></tr></tbody></table></div><p><strong>优点</strong>：模仿人眼，使用双目摄像头（<code>T265</code>看得广）以及深度摄像头（<code>D435i</code>数据精确），可以建图，对环境进行探测。</p><p><strong>缺陷</strong>：只能看到前方大部分场景，而且在弱光下效果不佳。</p><h2 id="无人车"><a href="#无人车" class="headerlink" title="无人车"></a>无人车</h2><h3 id="实机图"><a href="#实机图" class="headerlink" title="实机图"></a>实机图</h3><p><img alt="无人车总体" width="67%" data-src="https://tva3.sinaimg.cn/mw690/007EYOWmly1gott9r08bhj30m80m8wgb.jpg"></p><p>一些使用的<strong>基本软件</strong>介绍：</p><ul><li><code>MissionPlan</code>：地面站，连接无人车的飞控，用于航线规划。</li><li><code>nomachine</code>：界面化的ssh，用于连接板载计算机，可以理解为复制了一个板载计算机的显示屏。</li></ul><h3 id="飞控介绍"><a href="#飞控介绍" class="headerlink" title="飞控介绍"></a>飞控介绍</h3><p>&emsp;&emsp;飞控板主要负责控制小车的四个电机，并且搭载有IMU,RTK,GPS等传感器，可以与板载计算机和地面站进行通讯，接收下发的命令，上发一些小车状态数据，传感器数据等，飞控板还负责一些简单的功能应用的逻辑处理。<br>&emsp;&emsp;使用的是<code>pixhawk 4</code>飞控板，可以理解为硬件，飞控软件叫 <code>PX4</code>。这个一般是给无人机用的，显然在这里用于无人车是有点大材小用的意思hh。</p><h3 id="知识笔记"><a href="#知识笔记" class="headerlink" title="知识笔记"></a>知识笔记</h3><p>&emsp;&emsp;<strong>MavLink协议和Mavros：</strong>MavLink是消息传递的一种协议，在这里，飞控和板载计算机之间的消息传递就是<code>MavLink协议</code>，这个协议规定了一些控制变量，相当于一个桥梁，使得Mavros可以获得这些消息并且发布到相对应的话题。开发过程就是基于Mavros这些发布出来的消息，写一个新的节点使用这些消息并且发布新的指令，这些指令会经过MavLink协议控制飞控进行相关操作。<br>&emsp;&emsp;其实使用的就是<code>px4</code>中的代码，避障使用的是雷达避障，具体实现的代码可以去查看<code>px4</code>仓库。</p><h3 id="使用注意"><a href="#使用注意" class="headerlink" title="使用注意"></a>使用注意</h3><p>&emsp;&emsp;无人机自身有一个<code>wifi</code>无线模块，地面站连接飞控时使用TCP连接，使飞控与地面站连接。注意地面站首次使用一般要连互联网去获取GPS地图，无人机的局域网是不能上网的。<br>&emsp;&emsp;遥控器打开就可以直接连接到无人机，但是要注意：修改模式的那个摇杆要建立好映射（通道要一致）。<br>&emsp;&emsp;在具体实现<code>offboard</code>模式（板载计算机控制无人车）的过程中，需要使得<strong>板载计算机</strong>，<strong>自己的PC端</strong>，<strong>飞控</strong>都连载同一个局域网之下，这就要求板载计算机开机就要自动连接上飞控的网络并且获得一个IP地址，这个IP地址用于自己的PC端使用<code>nomachine</code>去连接板载计算机实现控制。因此，往往第一次使用要给板载计算机外接显示器连接网络，之后练好了就可以不用再配了，开机就自动连接。顺便提一嘴：获得当前网络下主机所有IP的命令是：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ arp -a</span><br></pre></td></tr></table></figure><p></p><h3 id="实战避障过程："><a href="#实战避障过程：" class="headerlink" title="实战避障过程："></a>实战避障过程：</h3><ul><li>先连接好飞控和板载计算机，在<code>MissionPlan</code>里画好路线</li><li>使用板载计算机启动响应的节点，确保每个节点都没有问题</li><li>遥控器切换自动（<code>auto模式</code>），这时跑一遍，理论上是直线</li><li>遥控器先切换手动，然后按下<code>offboard</code>模式开关，无人车会开始避障</li><li>如果出现意外情况，退出<code>offboard</code>模式会默认回到进入之前的飞行模式（即手动模式）</li></ul><p>在这个过程中，<code>Mavros</code>节点会读取在地面战画好的航点信息。</p><h2 id="无人机"><a href="#无人机" class="headerlink" title="无人机"></a>无人机</h2><h3 id="实机图-1"><a href="#实机图-1" class="headerlink" title="实机图"></a>实机图</h3><p><strong>总体样貌：</strong><br><img alt="无人机总体" width="70%" data-src="https://tvax3.sinaimg.cn/mw690/007EYOWmly1gott3kw7faj33341ueqv9.jpg"></p><p><strong>吊舱细节图（每一次使用吊舱前都要重新插拔一次保证正常运行）：</strong><br><img alt="无人机吊舱" width="40%" data-src="https://tvax4.sinaimg.cn/mw690/007EYOWmly1gott2ss8shj332b3igu13.jpg"></p><p>一些使用的<strong>基本软件</strong>介绍：</p><ul><li><code>QGC</code>：地面站，连接无人机的飞控，用于航线规划。</li><li><code>nomachine</code>：界面化的ssh，用于连接板载计算机，可以理解为复制了一个板载计算机的显示屏。</li></ul><h3 id="知识笔记-1"><a href="#知识笔记-1" class="headerlink" title="知识笔记"></a>知识笔记</h3><p>&emsp;&emsp;无人机和无人车在原理上有很多共同之处，相比较无人车，无人机不论是飞行模式还是指令控制都更加丰富。<br>&emsp;&emsp;无人机最关键之处就是<code>Homer图数传</code>，<code>Homer</code>可以理解为一个范围更远的<code>wifi</code>（最远可以有好几公里），用于无人机室外飞行，<code>Homer</code>有地面端和空中端。要使得图数传正常运行，需要保证QGC地面站、板载计算机、网口摄像头和图数传的连接正常，具体：用nomachine从板载计算机（移动端）的<code>CMS</code>看照片，PC端可以通过<code>QGC</code>看照片。<br>&emsp;&emsp;<code>Homer</code>图数传上的串口可以用来传输消息，通过阅读串口传输协议可以知道如何获取这些消息以及发布相关消息，这些消息目前主要用到的就是记录吊舱的<code>imu</code>的三个维度的角度。具体作用：物体追踪时，根据所选物体偏移的角度，无人机的吊舱会调整角度使得物体始终在视野中间，如果物体偏小或偏大，无人机会通过吊舱从串口读出的<code>imu</code>数据进行航向以及速度的调整使得所选物体保持在视线中心且距离较近。</p><h3 id="实战避障过程"><a href="#实战避障过程" class="headerlink" title="实战避障过程"></a>实战避障过程</h3><ul><li>先连接好飞控和板载计算机，注意要让无人机<strong>向东放置</strong>（<em>代码默认初始向东</em>），在<code>QGC</code>里画好路线</li><li>使用板载计算机启动响应的节点，确保每个节点都没有问题，一般有问题就是重新开启以下对应的模块就行</li><li>遥控器切换自动（<code>auto模式</code>），这时跑一遍，理论上是直线</li><li>遥控器先切换手动，然后按下<code>offboard</code>模式开关，无人机会开始避障</li><li>最终无人机停在终点上方，自动换回手动模式</li><li>如果出现意外情况，退出<code>offboard</code>模式会默认回到进入之前的飞行模式（即手动模式）</li></ul><h3 id="实战追踪过程"><a href="#实战追踪过程" class="headerlink" title="实战追踪过程"></a>实战追踪过程</h3><ul><li>连接好各个部件</li><li>先重新插拔一下吊舱</li><li>使用板载计算机启动响应的节点，确保每个节点都没有问题</li><li>在弹出的<code>CMS</code>界面中圈选目标</li><li>遥控器先切换手动，然后按下<code>offboard</code>模式开关，目标移动，正常来讲无人机会去跟着跑</li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本次参加AmovLab关于无人机以及无人车的培训，对ROS实现自动化无人机有了更深入的了解，此博客记录主要记录实体样机的使用以及组成。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="ROS学习" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="ROSLearn" scheme="https://nonsense-j.top/tags/ROSLearn/"/>
    
  </entry>
  
  <entry>
    <title>ROS-编写简单的服务和客户端</title>
    <link href="https://nonsense-j.top/2021/03/15/ROS-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/"/>
    <id>https://nonsense-j.top/2021/03/15/ROS-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%92%8C%E5%AE%A2%E6%88%B7%E7%AB%AF/</id>
    <published>2021-03-14T18:18:19.000Z</published>
    <updated>2021-03-14T18:21:42.192Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文基于官网教程介绍了编写简单的服务和客户端基本步骤，包括配置方法以及c++、python两种实现。</p></div><a id="more"></a><h2 id="srv文件的创建与使用"><a href="#srv文件的创建与使用" class="headerlink" title="srv文件的创建与使用"></a>srv文件的创建与使用</h2><p>srv文件一般是存放在包的srv子目录之下，它msg文件一样，只是它包含两个部分：请求和响应。这两部分用一条—-线隔开。下面是一个srv文件的示例：：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int64 A</span><br><span class="line">int64 B</span><br><span class="line">---</span><br><span class="line">int64 Sum</span><br></pre></td></tr></table></figure><br>为了使用这个srv文件，也需要对<code>package.xml</code>和<code>CMakeList.txt</code>中的内容进行修改，首先明确一点：<p></p><p><strong>别被名字迷惑，message_generation对msg和srv都适用</strong></p><ul><li><code>package.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以下内容取消注释</span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>CMakeList.txt</code><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了生成消息，在里面的find_package调用添加message_generation依赖项</span></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">   roscpp</span><br><span class="line">   rospy</span><br><span class="line">   std_msgs</span><br><span class="line">   message_generation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动添加.srv文件</span></span><br><span class="line">add_service_files(</span><br><span class="line">  FILES</span><br><span class="line">  AddTwoInts.srv</span><br><span class="line">)</span><br></pre></td></tr></table></figure>接下来重新catkin_make一下就可以了嗷！使用<code>rossrv list</code>命令会发现多了一个名字叫<code>beginner_tutorials/AddTwoInts</code>的服务</li></ul><p>至于头文件在哪：</p><ul><li>c++头文件将生成在消息的头文件的同一目录中：<code>~/catkin_ws/devel/include/beginner_tutorials/</code>。</li><li>对于Python和Lisp，会在msg目录旁边的srv目录中。</li></ul><h2 id="代码实现c"><a href="#代码实现c" class="headerlink" title="代码实现c++"></a>代码实现c++</h2><h3 id="代码存储位置"><a href="#代码存储位置" class="headerlink" title="代码存储位置"></a>代码存储位置</h3><p>c++代码存放在指定的包(<code>beginner_tutorials</code>)下的src子目录之中。</p><p>自定义的srv文件生成的头文件存放在：<code>~/catkin_ws/devel/include/beginner_tutorials/</code></p><p>为了可以rosrun生成的文件，需要修改该package下的<code>CMakeList.txt</code>中的内容：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## add for server and client written by cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(add_two_ints_server src/add_two_ints_server.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(add_two_ints_server <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(add_two_ints_server beginner_tutorials_gencpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(add_two_ints_client src/add_two_ints_client.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(add_two_ints_client <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(add_two_ints_client beginner_tutorials_gencpp)</span><br></pre></td></tr></table></figure><p></p><h3 id="服务端server"><a href="#服务端server" class="headerlink" title="服务端server:"></a>服务端server:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">add</span><span class="params">(beginner_tutorials::AddTwoInts::Request  &amp;req,</span></span></span><br><span class="line"><span class="function"><span class="params">         beginner_tutorials::AddTwoInts::Response &amp;res)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  res.sum = req.a + req.b;</span><br><span class="line">  ROS_INFO(<span class="string">"request: x=%ld, y=%ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)req.a, (<span class="keyword">long</span> <span class="keyword">int</span>)req.b);</span><br><span class="line">  ROS_INFO(<span class="string">"sending back response: [%ld]"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)res.sum);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_server"</span>);</span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line"></span><br><span class="line">  ros::ServiceServer service = n.advertiseService(<span class="string">"add_two_ints"</span>, add);</span><br><span class="line">  ROS_INFO(<span class="string">"Ready to add two ints."</span>);</span><br><span class="line">  ros::spin();</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="客户端client"><a href="#客户端client" class="headerlink" title="客户端client:"></a>客户端client:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"beginner_tutorials/AddTwoInts.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> **argv)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ros::init(argc, argv, <span class="string">"add_two_ints_client"</span>);</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">3</span>)</span><br><span class="line">  &#123;</span><br><span class="line">    ROS_INFO(<span class="string">"usage: add_two_ints_client X Y"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  ros::NodeHandle n;</span><br><span class="line">  ros::ServiceClient client = n.serviceClient&lt;beginner_tutorials::AddTwoInts&gt;(<span class="string">"add_two_ints"</span>);</span><br><span class="line">  beginner_tutorials::AddTwoInts srv;</span><br><span class="line">  srv.request.a = atoll(argv[<span class="number">1</span>]);</span><br><span class="line">  srv.request.b = atoll(argv[<span class="number">2</span>]);</span><br><span class="line">  <span class="keyword">if</span> (client.call(srv))</span><br><span class="line">  &#123;</span><br><span class="line">    ROS_INFO(<span class="string">"Sum: %ld"</span>, (<span class="keyword">long</span> <span class="keyword">int</span>)srv.response.sum);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">  &#123;</span><br><span class="line">    ROS_ERROR(<span class="string">"Failed to call service add_two_ints"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现python"><a href="#代码实现python" class="headerlink" title="代码实现python"></a>代码实现python</h2><h3 id="代码存储位置-1"><a href="#代码存储位置-1" class="headerlink" title="代码存储位置"></a>代码存储位置</h3><p>python代码一般存放在指定的包(<code>beginner_tutorials</code>)下的scripts子目录之中，<br>为了可以rosrun生成的文件，需要修改该package下的<code>CMakeList.txt</code>中的内容：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## add for server and client written by python</span></span><br><span class="line">catkin_install_python(PROGRAMS scripts/add_two_ints_server.py scripts/add_two_ints_client.py</span><br><span class="line">  DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><h3 id="python文件要记得给可执行权限"><a href="#python文件要记得给可执行权限" class="headerlink" title="python文件要记得给可执行权限"></a>python文件要记得给可执行权限</h3><p>别忘了给节点执行权限：<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x scripts/add_two_ints_server.py</span><br></pre></td></tr></table></figure><p></p><h3 id="服务器端server"><a href="#服务器端server" class="headerlink" title="服务器端server:"></a>服务器端server:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> print_function</span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> beginner_tutorials.srv <span class="keyword">import</span> AddTwoInts,AddTwoIntsResponse</span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">handle_add_two_ints</span><span class="params">(req)</span>:</span></span><br><span class="line">    print(<span class="string">"Returning [%s + %s = %s]"</span>%(req.a, req.b, (req.a + req.b)))</span><br><span class="line">    <span class="keyword">return</span> AddTwoIntsResponse(req.a + req.b)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add_two_ints_server</span><span class="params">()</span>:</span></span><br><span class="line">    rospy.init_node(<span class="string">'add_two_ints_server'</span>)</span><br><span class="line">    s = rospy.Service(<span class="string">'add_two_ints'</span>, AddTwoInts, handle_add_two_ints)</span><br><span class="line">    print(<span class="string">"Ready to add two ints."</span>)</span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    add_two_ints_server()</span><br></pre></td></tr></table></figure><h3 id="客户端client-1"><a href="#客户端client-1" class="headerlink" title="客户端client:"></a>客户端client:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/lib/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(data)</span>:</span></span><br><span class="line">    rospy.loginfo(rospy.get_caller_id() + <span class="string">'I heard %s'</span>, data.data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listener</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># anoymous=True意味着listener节点创建时会在名字尾部加上一串id防止重复</span></span><br><span class="line">    rospy.init_node(<span class="string">'listener'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rospy.Subscriber(<span class="string">'chatter'</span>, String, callback)</span><br><span class="line">    <span class="comment"># spin() simply keeps python from exiting until this node is stopped</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    listener()</span><br></pre></td></tr></table></figure><h2 id="运行服务和客户端"><a href="#运行服务和客户端" class="headerlink" title="运行服务和客户端"></a>运行服务和客户端</h2><h3 id="运行服务端-python版本就是运行xxx-py-："><a href="#运行服务端-python版本就是运行xxx-py-：" class="headerlink" title="运行服务端(python版本就是运行xxx.py)："></a>运行服务端(<em>python版本就是运行xxx.py</em>)：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun beginner_tutorials add_two_ints_server</span><br></pre></td></tr></table></figure><h3 id="运行客户端："><a href="#运行客户端：" class="headerlink" title="运行客户端："></a>运行客户端：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosrun beginner_tutorials add_two_ints_client 1 3</span><br></pre></td></tr></table></figure><h3 id="直接调用服务："><a href="#直接调用服务：" class="headerlink" title="直接调用服务："></a>直接调用服务：</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rosservice call /add_two_ints 1 3</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文基于官网教程介绍了编写简单的服务和客户端基本步骤，包括配置方法以及c++、python两种实现。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="ROS学习" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="ROS实战入门" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/ROS%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ROSLearn" scheme="https://nonsense-j.top/tags/ROSLearn/"/>
    
  </entry>
  
  <entry>
    <title>ROS-编写简单的发布者和订阅者</title>
    <link href="https://nonsense-j.top/2021/03/15/ROS-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85/"/>
    <id>https://nonsense-j.top/2021/03/15/ROS-%E7%BC%96%E5%86%99%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%91%E5%B8%83%E8%80%85%E5%92%8C%E8%AE%A2%E9%98%85%E8%80%85/</id>
    <published>2021-03-14T18:11:50.000Z</published>
    <updated>2021-03-14T18:21:39.627Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文基于官网教程介绍了编写简单的发布者和订阅者基本步骤，包括配置方法以及c++、python两种实现。</p></div><a id="more"></a><h2 id="概览"><a href="#概览" class="headerlink" title="概览"></a>概览</h2><h3 id="msg文件的创建与使用"><a href="#msg文件的创建与使用" class="headerlink" title="msg文件的创建与使用"></a>msg文件的创建与使用</h3><p>msg文件一般存放在包的msg子目录之下，内容就是对消息的数据格式进行定义，例如：<br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Header header</span><br><span class="line">string child_frame_id</span><br><span class="line">geometry_msgs/PoseWithCovariance pose</span><br><span class="line">geometry_msgs/TwistWithCovariance twist</span><br></pre></td></tr></table></figure><br>要使得这个msg被master或者说整个ros认识并且得到使用，需要修改<code>package.xml</code>和<code>CMakeList.txt</code>中的内容：<p></p><ul><li><code>package.xml</code><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># 以下内容取消注释</span><br><span class="line"><span class="tag">&lt;<span class="name">build_depend</span>&gt;</span>message_generation<span class="tag">&lt;/<span class="name">build_depend</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">exec_depend</span>&gt;</span>message_runtime<span class="tag">&lt;/<span class="name">exec_depend</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><code>CMakeList.txt</code><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 为了生成消息，在里面的find_package调用添加message_generation依赖项</span></span><br><span class="line"><span class="keyword">find_package</span>(catkin REQUIRED COMPONENTS</span><br><span class="line">   roscpp</span><br><span class="line">   rospy</span><br><span class="line">   std_msgs</span><br><span class="line">   message_generation</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 还要确保导出消息的运行时依赖关系：</span></span><br><span class="line">catkin_package(</span><br><span class="line">  ...</span><br><span class="line">  CATKIN_DEPENDS message_runtime ...</span><br><span class="line">  ...)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 手动添加.msg文件</span></span><br><span class="line">add_message_files(</span><br><span class="line">  FILES</span><br><span class="line">  Num.msg //这个是添加的msg文件名称</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 然后，我们要确保CMake知道何时需要重新配置项目，即要generate_messages()函数被调用（只要让下面几行取消注释就可以了）：</span></span><br><span class="line">generate_messages(</span><br><span class="line">  DEPENDENCIES</span><br><span class="line">  std_msgs</span><br><span class="line">)</span><br></pre></td></tr></table></figure>接下来重新catkin_make一下就可以了嗷！使用<code>rosmsg list</code>命令会发现多了一个名字叫<code>beginner_tutorials/Num</code>的消息类型。</li></ul><p>至于生成的头文件在哪里：</p><ul><li>msg目录中的任何.msg文件都将生成所有支持语言的代码。C++消息的头文件将生成在<code>~/catkin_ws/devel/include/beginner_tutorials/</code>。Python脚本将创建在<code>~/catkin_ws/devel/lib/python2.7/dist-packages/beginner_tutorials/msg</code>。而Lisp文件则出现在<code>~/catkin_ws/devel/share/common-lisp/ros/beginner_tutorials/msg/</code>。</li></ul><h3 id="发布者"><a href="#发布者" class="headerlink" title="发布者"></a>发布者</h3><ul><li>初始化ROS系统</li><li>向主节点宣告我们将要在chatter话题上发某一类型[<code>std_msgs/String</code>]的消息</li><li>以某一指定的速率向chatter循环发布消息</li></ul><h3 id="订阅者"><a href="#订阅者" class="headerlink" title="订阅者"></a>订阅者</h3><ul><li>初始化ROS系统</li><li>订阅chatter话题</li><li>开始spin自循环，等待消息的到达</li><li>当消息到达后，调用chatterCallback()函数</li></ul><h2 id="代码实现c"><a href="#代码实现c" class="headerlink" title="代码实现c++"></a>代码实现c++</h2><h3 id="代码存储位置"><a href="#代码存储位置" class="headerlink" title="代码存储位置"></a>代码存储位置</h3><p>c++代码存放在指定的包(<code>beginner_tutorials</code>)下的src子目录之中。</p><p>自定义的msg头文件存放在：<code>~/catkin_ws/devel/include/beginner_tutorials/</code>。</p><p>为了可以rosrun生成的文件，需要修改该package下的<code>CMakeList.txt</code>中的内容：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## add for talker and listener written by cpp</span></span><br><span class="line"><span class="keyword">add_executable</span>(talker src/talker.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(talker <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(talker beginner_tutorials_generate_messages_cpp)</span><br><span class="line"></span><br><span class="line"><span class="keyword">add_executable</span>(listener src/listener.cpp)</span><br><span class="line"><span class="keyword">target_link_libraries</span>(listener <span class="variable">$&#123;catkin_LIBRARIES&#125;</span>)</span><br><span class="line"><span class="keyword">add_dependencies</span>(listener beginner_tutorials_generate_messages_cpp)</span><br></pre></td></tr></table></figure><p></p><h3 id="发布者talker"><a href="#发布者talker" class="headerlink" title="发布者talker:"></a>发布者talker:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sstream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    ros::init(argc, argv, <span class="string">"talker"</span>);</span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Publisher chatter_pub = n.advertise&lt;std_msgs::<span class="keyword">String</span>&gt;(<span class="string">"chatter"</span>, <span class="number">1000</span>);</span><br><span class="line">    ros::<span class="function">Rate <span class="title">loop_rate</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (ros::ok())</span><br><span class="line">    &#123;</span><br><span class="line">        std_msgs::<span class="keyword">String</span> msg;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">stringstream</span> ss;</span><br><span class="line">        ss &lt;&lt; <span class="string">"Hello world "</span> &lt;&lt; count;</span><br><span class="line">        msg.data = ss.str();</span><br><span class="line"></span><br><span class="line">        ROS_INFO(<span class="string">"%s"</span>, msg.data.c_str());</span><br><span class="line">        chatter_pub.publish(msg);</span><br><span class="line">        ros::spinOnce();</span><br><span class="line">        loop_rate.sleep();</span><br><span class="line">        count++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="订阅者listener"><a href="#订阅者listener" class="headerlink" title="订阅者listener:"></a>订阅者listener:</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ros/ros.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"std_msgs/String.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 注意这里的形式参数是怎么定义的</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">chatterCallback</span><span class="params">(<span class="keyword">const</span> std_msgs::<span class="keyword">String</span>::ConstPtr&amp; msg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  ROS_INFO(<span class="string">"I heard: [%s]"</span>, msg-&gt;data.c_str());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>** argv)</span></span>&#123;</span><br><span class="line">    ros::init(argc, argv, <span class="string">"listener"</span>);</span><br><span class="line">    ros::NodeHandle n;</span><br><span class="line">    ros::Subscriber chatter_sub = n.subscribe(<span class="string">"chatter"</span>, <span class="number">1000</span>, chatterCallback);</span><br><span class="line">    ros::spin();</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="代码实现python"><a href="#代码实现python" class="headerlink" title="代码实现python"></a>代码实现python</h2><h3 id="代码存储位置-1"><a href="#代码存储位置-1" class="headerlink" title="代码存储位置"></a>代码存储位置</h3><p>python代码一般存放在指定的包(<code>beginner_tutorials</code>)下的scripts子目录之中，<br>为了可以rosrun生成的文件，需要修改该package下的<code>CMakeList.txt</code>中的内容：<br></p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">## add for talker and listener written by python</span></span><br><span class="line">catkin_install_python(PROGRAMS scripts/talker.py scripts/listener.py</span><br><span class="line">  DESTINATION <span class="variable">$&#123;CATKIN_PACKAGE_BIN_DESTINATION&#125;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><p></p><h3 id="python文件要记得给可执行权限"><a href="#python文件要记得给可执行权限" class="headerlink" title="python文件要记得给可执行权限"></a>python文件要记得给可执行权限</h3><p>别忘了给节点执行权限：<br></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x scripts/add_two_ints_server.py</span><br></pre></td></tr></table></figure><p></p><h3 id="发布者talker-1"><a href="#发布者talker-1" class="headerlink" title="发布者talker:"></a>发布者talker:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">talker</span><span class="params">()</span>:</span></span><br><span class="line">    pub = rospy.Publisher(<span class="string">'chatter'</span>, String, queue_size=<span class="number">10</span>)</span><br><span class="line">    rospy.init_node(<span class="string">'talker'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rate = rospy.Rate(<span class="number">10</span>) <span class="comment"># 10hz</span></span><br><span class="line">    <span class="keyword">while</span> <span class="keyword">not</span> rospy.is_shutdown():</span><br><span class="line">        hello_str = <span class="string">"hello world %s"</span> % rospy.get_time()</span><br><span class="line">        rospy.loginfo(hello_str)</span><br><span class="line">        pub.publish(hello_str)</span><br><span class="line">        rate.sleep()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        talker()</span><br><span class="line">    <span class="keyword">except</span> rospy.ROSInterruptException:</span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure><h3 id="订阅者listener-1"><a href="#订阅者listener-1" class="headerlink" title="订阅者listener:"></a>订阅者listener:</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/lib/env python</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> rospy</span><br><span class="line"><span class="keyword">from</span> std_msgs.msg <span class="keyword">import</span> String</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">callback</span><span class="params">(data)</span>:</span></span><br><span class="line">    rospy.loginfo(rospy.get_caller_id() + <span class="string">'I heard %s'</span>, data.data)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">listener</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># anoymous=True意味着listener节点创建时会在名字尾部加上一串id防止重复</span></span><br><span class="line">    rospy.init_node(<span class="string">'listener'</span>, anonymous=<span class="literal">True</span>)</span><br><span class="line">    rospy.Subscriber(<span class="string">'chatter'</span>, String, callback)</span><br><span class="line">    <span class="comment"># spin() simply keeps python from exiting until this node is stopped</span></span><br><span class="line">    rospy.spin()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    listener()</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文基于官网教程介绍了编写简单的发布者和订阅者基本步骤，包括配置方法以及c++、python两种实现。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="ROS学习" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="ROS实战入门" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/ROS%E5%AE%9E%E6%88%98%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="ROSLearn" scheme="https://nonsense-j.top/tags/ROSLearn/"/>
    
  </entry>
  
  <entry>
    <title>ROS常用命令概览</title>
    <link href="https://nonsense-j.top/2021/03/09/ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%A6%82%E8%A7%88/"/>
    <id>https://nonsense-j.top/2021/03/09/ROS%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E6%A6%82%E8%A7%88/</id>
    <published>2021-03-09T01:58:53.000Z</published>
    <updated>2021-03-15T05:54:08.227Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文只对学习使用ROS时常用的命令进行记录。</p></div><a id="more"></a><h2 id="查看环境变量"><a href="#查看环境变量" class="headerlink" title="查看环境变量"></a>查看环境变量</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ printenv | grep ROS</span><br><span class="line">$ <span class="built_in">echo</span> <span class="variable">$ROS_PACKAGE_PATH</span></span><br></pre></td></tr></table></figure><h2 id="设置新的工作区"><a href="#设置新的工作区" class="headerlink" title="设置新的工作区"></a>设置新的工作区</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir -p ~/catkin_ws/src<span class="comment"># 创建工作区的文件夹</span></span><br><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws/<span class="comment"># 进入工作区文件夹</span></span><br><span class="line">$ catkin_make<span class="comment"># 初始化文件夹，会在src下生成CMakeLists.txt,同时生成devel和build文件夹（与src并列）</span></span><br><span class="line">$ <span class="built_in">source</span> devel/setup.bash<span class="comment"># 让ROS知道在本工作区的src下找packages，将工作区src路径添加到环境变量中并且置于最前端（仅在当前前端有效，永久设置需要改动~/.bashrc）</span></span><br></pre></td></tr></table></figure><h2 id="获取软件包的有关信息"><a href="#获取软件包的有关信息" class="headerlink" title="获取软件包的有关信息"></a>获取软件包的有关信息</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rospack find [package_name]<span class="comment"># 输出该包的存储路径</span></span><br></pre></td></tr></table></figure><h2 id="通过包名快速切换工作路径"><a href="#通过包名快速切换工作路径" class="headerlink" title="通过包名快速切换工作路径"></a>通过包名快速切换工作路径</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ roscd [locationname[/subdir]]<span class="comment"># 例如：roscd roscpp ==&gt; pwd=/opt/ros/noetic/share/roscpp，当然也可以roscd roscpp/cmske进入子目录，前提是这个包可以通过环境变量ROS_PACKAGE_PATH找到</span></span><br></pre></td></tr></table></figure><h2 id="创建catkin软件包"><a href="#创建catkin软件包" class="headerlink" title="创建catkin软件包"></a>创建catkin软件包</h2><p>catkin软件包：必须有package.xml和CMakeLists.txt<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ catkin_create_pkg &lt;package_name&gt; [depend1] [depend2] [depend3]</span><br><span class="line">$ <span class="built_in">cd</span> ~/catkin_ws</span><br><span class="line">$ catkin_make</span><br></pre></td></tr></table></figure><p></p><h2 id="查看软件包的依赖关系"><a href="#查看软件包的依赖关系" class="headerlink" title="查看软件包的依赖关系"></a>查看软件包的依赖关系</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ rospack depends1 beginner_tutorials<span class="comment"># 一级依赖</span></span><br><span class="line">$ rospack depends beginner_tutorials<span class="comment"># 所有依赖（包括嵌套的）</span></span><br></pre></td></tr></table></figure><h2 id="理解ROS节点"><a href="#理解ROS节点" class="headerlink" title="理解ROS节点"></a>理解ROS节点</h2><ul><li><strong>节点（Nodes）</strong>：节点是一个可执行文件，它可以通过ROS来与其他节点进行通信。</li><li><strong>消息（Messages）</strong>：订阅或发布话题时所使用的ROS数据类型。</li><li><strong>话题（Topics）</strong>：节点可以将消息发布到话题，或通过订阅话题来接收消息。</li><li><strong>主节点（Master）</strong>：ROS的命名服务，例如帮助节点发现彼此。</li><li><strong>rosout</strong>：在ROS中相当于stdout/stderr（标准输出/标准错误）。</li><li><strong>roscore</strong>：主节点 + rosout + 参数服务器（会在以后介绍）。</li></ul><p>节点的实现：客户端库</p><ul><li><code>rospy</code> = Python客户端库</li><li><code>roscpp</code> = C++客户端库</li></ul><p>roscore是运行所有ROS程序之前必须先运行的命令</p><ul><li>roscore = ros+core：主节点（为ROS提供命名服务) + rosout (stdout/stderr) + 参数服务器（会在以后介绍）</li><li>rosnode = ros+node：获取节点信息的ROS工具</li><li>rosrun = ros+run：运行给定的软件包中的节点</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ roscore<span class="comment"># 对应master</span></span><br><span class="line">$ rosnode list<span class="comment"># 活跃的节点</span></span><br><span class="line">$ rosnode cleanup<span class="comment"># 如果是ctrl+C终止节点list会依旧显示，要用cleanup删掉</span></span><br><span class="line">$ rosnode info /rosout<span class="comment"># 某一指定节点的信息</span></span><br><span class="line">$ rosrun [package_name] [node_name]</span><br><span class="line">$ rosrun turtlesim turtlesim_node __name:=my_turtle<span class="comment"># 重映射参数，这个其实更多的用在改变节点参数配置，或者说用于运行多个不同配置的节点</span></span><br><span class="line">$ rosnode ping my_turtle<span class="comment"># 检查节点是否运行正常</span></span><br></pre></td></tr></table></figure><h2 id="理解ROS话题"><a href="#理解ROS话题" class="headerlink" title="理解ROS话题"></a>理解ROS话题</h2><p>可以使用rqt_graph：用动态的图显示了系统中正在发生的事情<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ rosrun rqt_graph rqt_graph</span><br></pre></td></tr></table></figure><br>其实也是运行了一个包的指定节点，这个节点的功能就是显示系统中正在发生的事情，包括不同节点之间通过什么话题进行交互。<p></p><p><strong>rostopic</strong>命令工具能让你获取ROS话题的信息：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ rostopic list<span class="comment">#显示所有的话题</span></span><br><span class="line">$ rostopic list -v<span class="comment">#列出当前已被订阅和发布的所有话题以及对应的发布者和订阅者数量</span></span><br><span class="line">$ rostopic <span class="built_in">echo</span> [topic]<span class="comment">#显示在某个话题上发布的数据</span></span><br><span class="line">$ rostopic <span class="built_in">type</span> [topic]<span class="comment">#查看所发布话题的消息类型</span></span><br><span class="line">$ rosmsg show [topicType]<span class="comment">#查看某一种消息的详细信息</span></span><br><span class="line">$ rostopic <span class="built_in">type</span> /turtle1/cmd_vel | rosmsg show<span class="comment">#组合使用</span></span><br><span class="line">$ rostopic pub [topic] [msg_type] [args]<span class="comment">#把数据发布到当前某个正在广播的话题上</span></span><br><span class="line"><span class="comment"># 实例如下：</span></span><br><span class="line">$ rosmsg show geometry_msgs/Twist</span><br><span class="line">- geometry_msgs/Vector3 linear</span><br><span class="line">- float64 x</span><br><span class="line">- float64 y</span><br><span class="line">- float64 z</span><br><span class="line">- geometry_msgs/Vector3 angular</span><br><span class="line">- float64 x</span><br><span class="line">- float64 y</span><br><span class="line">- float64 z</span><br><span class="line">$ rostopic pub -1 /turtle1/cmd_vel geometry_msgs/Twist -- <span class="string">'[2.0, 0.0, 0.0]'</span> <span class="string">'[0.0, 0.0, 1.8]'</span></span><br><span class="line">要让乌龟一直动，就要按1hz的频率稳定地发布消息，用-r</span><br><span class="line">$ rostopic pub /turtle1/cmd_vel geometry_msgs/Twist -r 1 -- <span class="string">'[2.0, 0.0, 0.0]'</span> <span class="string">'[0.0, 0.0, -1.8]'</span></span><br><span class="line">$ rostopic hz [topic]报告数据发布的速率</span><br></pre></td></tr></table></figure><p></p><h2 id="理解ROS服务和参数"><a href="#理解ROS服务和参数" class="headerlink" title="理解ROS服务和参数"></a>理解ROS服务和参数</h2><p>ROS服务：服务允许节点发送一个请求（request）并获得一个响应（response）<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$ rosservice list         <span class="comment"># 输出活跃服务的信息</span></span><br><span class="line">$ rosservice call         <span class="comment"># 用给定的参数调用服务</span></span><br><span class="line">$ rosservice <span class="built_in">type</span>         <span class="comment"># 输出服务的类型</span></span><br><span class="line">$ rosservice find         <span class="comment"># 按服务的类型查找服务</span></span><br><span class="line">$ rosservice uri          <span class="comment"># 输出服务的ROSRPC uri</span></span><br><span class="line">$ rosservice <span class="built_in">type</span> /service | rossrv show<span class="comment"># 查看服务类型的详细信息</span></span><br><span class="line">ROS参数服务器：存储各种数据类型</span><br><span class="line">$ rosparam <span class="built_in">set</span>            <span class="comment"># 设置参数</span></span><br><span class="line">$ rosparam get            <span class="comment"># 获取参数</span></span><br><span class="line">$ rosparam load           <span class="comment"># 从文件中加载参数</span></span><br><span class="line">$ rosparam dump           <span class="comment"># 向文件中转储参数</span></span><br><span class="line">$ rosparam delete         <span class="comment"># 删除参数</span></span><br><span class="line">$ rosparam list           <span class="comment"># 列出参数名</span></span><br><span class="line"><span class="comment">#这些参数往往是程序预先设定好的参数值，因此要使得改生效要调用clear服务</span></span><br></pre></td></tr></table></figure><p></p><h2 id="使用rqt-console和roslaunch"><a href="#使用rqt-console和roslaunch" class="headerlink" title="使用rqt_console和roslaunch"></a>使用rqt_console和roslaunch</h2><p>这两个都是有ui界面的：</p><ul><li><code>rqt_console</code>连接到了ROS的日志框架，以显示节点的输出信息。</li><li><code>rqt_logger_level</code>允许我们在节点运行时改变输出信息的详细级别，包括<strong>Debug</strong>、<strong>Info</strong>、<strong>Warn</strong>和<strong>Error</strong>。</li></ul><div class="note warning"><p><strong>Fatal</strong>是最高优先级，<strong>Debug</strong>是最低优先级。<br>通过设置日志级别，你可以获得所有优先级级别，或只是更高级别的消息。</p><p>比如，将日志级别设为<strong>Warn</strong>时，你会得到<strong>Warn</strong>、<strong>Error</strong>和<strong>Fatal</strong>这三个等级的日志消息。</p></div><ul><li>launch文件：<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">1 <span class="tag">&lt;<span class="name">launch</span>&gt;</span></span><br><span class="line">2 </span><br><span class="line">3   <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">"turtlesim1"</span>&gt;</span> ---表示不同的命名空间，发布消息给不同命名空间的话题</span><br><span class="line">4     <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">name</span>=<span class="string">"sim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</span></span><br><span class="line">5   <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">6 </span><br><span class="line">7   <span class="tag">&lt;<span class="name">group</span> <span class="attr">ns</span>=<span class="string">"turtlesim2"</span>&gt;</span></span><br><span class="line">8     <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">name</span>=<span class="string">"sim"</span> <span class="attr">type</span>=<span class="string">"turtlesim_node"</span>/&gt;</span></span><br><span class="line">9   <span class="tag">&lt;/<span class="name">group</span>&gt;</span></span><br><span class="line">10 </span><br><span class="line">11   <span class="tag">&lt;<span class="name">node</span> <span class="attr">pkg</span>=<span class="string">"turtlesim"</span> <span class="attr">name</span>=<span class="string">"mimic"</span> <span class="attr">type</span>=<span class="string">"mimic"</span>&gt;</span></span><br><span class="line">12     <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"input"</span> <span class="attr">to</span>=<span class="string">"turtlesim1/turtle1"</span>/&gt;</span></span><br><span class="line">13     <span class="tag">&lt;<span class="name">remap</span> <span class="attr">from</span>=<span class="string">"output"</span> <span class="attr">to</span>=<span class="string">"turtlesim2/turtle1"</span>/&gt;</span></span><br><span class="line">14   <span class="tag">&lt;/<span class="name">node</span>&gt;</span></span><br><span class="line">15 </span><br><span class="line">16 <span class="tag">&lt;/<span class="name">launch</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><h2 id="使用rosed在ROS中编辑文件"><a href="#使用rosed在ROS中编辑文件" class="headerlink" title="使用rosed在ROS中编辑文件"></a>使用rosed在ROS中编辑文件</h2><p>rosed可以直接通过包的名称编辑包中的文件，这样就不用输入很长的一串路径了，就跟roscd有异曲同工之妙。</p><p>而且还巧妙使用Tab键查看包中的所有文件名称。</p><h2 id="使用rosbag录制和回放数据"><a href="#使用rosbag录制和回放数据" class="headerlink" title="使用rosbag录制和回放数据"></a>使用rosbag录制和回放数据</h2><p>运行rosbag record带选项-a，表明所有发布的话题都应该积累在一个bag文件中。<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ rosbag record -a<span class="comment"># 开始录像，是指对话题以及其中涉及的消息进行记录</span></span><br><span class="line">$ rosbag record -O record1<span class="comment"># -O用于表示写到一个叫record1.bag的文件之中</span></span><br><span class="line">$ rosbag record --topics /turtle1/cmd_vel /turtle1/pose<span class="comment"># 本bag只能订阅这两个指定的话题</span></span><br><span class="line">$ rosbag info xxxx.bag<span class="comment"># 查看某一个bag包的具体信息</span></span><br><span class="line">$ rosbag play xxxx.bag<span class="comment"># 回放某一个包中的数据，相当与那些消息再一次按顺序传播一次</span></span><br><span class="line">$ rosbag play -r 2 &lt;your bagfile&gt;<span class="comment"># 加速回放，这是2倍速</span></span><br><span class="line">$ rosbag play -s xx &lt;your_bagfile&gt; <span class="comment"># 从某个时间点开始回放</span></span><br><span class="line">$ time rosbag play --immediate demo.bag --topics /topic1 /topic2 /topic3 /topicN<span class="comment"># 对于大型项目对其中的部分主题进行数据回放</span></span><br></pre></td></tr></table></figure><br>注意一点，如果不先运行主题，直接回放bag文件是可以的，而且可以将每个主题中的数据存到一个yaml文件之中：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ rostopic <span class="built_in">echo</span> /turtle1/cmd_vel | tee topic1.yaml<span class="comment"># 当前终端会有输出</span></span><br><span class="line">$ rostopic <span class="built_in">echo</span> /turtle1/cmd_vel &gt; topic1.yaml<span class="comment"># 当前终端啥也没有，但却是写进文件了</span></span><br><span class="line">$ rostopic <span class="built_in">echo</span> /turtle1/cmd_vel &gt;&gt; topic1.yaml<span class="comment"># 附加，添加到文件末尾，不替换</span></span><br></pre></td></tr></table></figure><br>用上面的命令要先使用<code>rosbag play</code>从而使得<code>rostopic</code>可以读取到数据写入文件，当然<br>也可以直接使用rostopc echo中的-b即：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可以直接读取出这个bag中该主题的数据,然后也就可以重定向或者tee写入yaml文件</span></span><br><span class="line">$ rostopic <span class="built_in">echo</span> -b demo.bag /turtle1/cmd_vel</span><br></pre></td></tr></table></figure><br>但是嗷，rostopic echo读大的bag文件的时候非常慢，因此可以使用ros_readbagfile这个脚本：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ros_readbagfile &lt;mybagfile.bag&gt; [topic1] [topic2] [topic3] [...]</span><br></pre></td></tr></table></figure><br>所以，要看数据，用<code>ros_readbagfile</code>就完事了嗷。<br>```<p></p><h2 id="使用roswtf检查问题"><a href="#使用roswtf检查问题" class="headerlink" title="使用roswtf检查问题"></a>使用roswtf检查问题</h2><p>先<code>roscd</code>再<code>roswtf</code>就可以了</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文只对学习使用ROS时常用的命令进行记录。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="ROS学习" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="ROS命令" scheme="https://nonsense-j.top/categories/ROS%E5%AD%A6%E4%B9%A0/ROS%E5%91%BD%E4%BB%A4/"/>
    
    
      <category term="ROSLearn" scheme="https://nonsense-j.top/tags/ROSLearn/"/>
    
  </entry>
  
  <entry>
    <title>使用GDB调试c/c++程序</title>
    <link href="https://nonsense-j.top/2021/03/09/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/"/>
    <id>https://nonsense-j.top/2021/03/09/GDB%E8%B0%83%E8%AF%95%E5%91%BD%E4%BB%A4/</id>
    <published>2021-03-09T01:54:14.000Z</published>
    <updated>2021-03-10T01:52:37.077Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文介绍了gdb的调试使用方法以及一些实用命令。</p></div><a id="more"></a><h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><p>GDB是一个由GNU开源组织发布的、UNIX/LINUX操作系统下的、基于命令行的、功能强大的程序调试工具，要使用GDB调试<code>c/c++</code>程序：</p><p>编译时需要加入<code>-g</code>参数：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -g hello.cpp -o hello</span><br></pre></td></tr></table></figure><p></p><p>使用GDB调试程序：<br></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这里的 program 就是hello</span></span><br><span class="line">$ gdb &lt;program&gt;</span><br></pre></td></tr></table></figure><p></p><h1 id="gdb交互命令"><a href="#gdb交互命令" class="headerlink" title="gdb交互命令"></a>gdb交互命令</h1><p>启动gdb后，进入到交互模式，通过以下命令完成对程序的调试；注意高频使用的命令一般都会有缩写，熟练使用这些缩写命令能提高调试的效率；</p><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><ul><li><code>run</code>：简记为 <code>r</code> ，其作用是运行程序，当遇到断点后，程序会在断点处停止运行，等待用户输入下一步的命令。</li><li><code>continue</code>（简写<code>c</code> ）：继续执行，到下一个断点处（或运行结束）</li><li><code>next</code>：（简写 <code>n</code>），单步跟踪程序，当遇到函数调用时，也不进入此函数体；此命令同 step 的主要区别是，step 遇到用户自定义的函数，将步进到函数中去运行，而 next 则直接调用函数，不会进入到函数体内。</li><li><code>step</code> （简写<code>s</code>）：单步调试如果有函数调用，则进入函数；与命令n不同，n是不进入调用的函数的</li><li><code>until</code>：当你厌倦了在一个循环体内单步跟踪时，这个命令可以运行程序直到退出循环体。</li><li><code>until+行号</code>： 运行至某行，不仅仅用来跳出循环</li><li><code>finish</code>： 运行程序，直到当前函数完成返回，并打印函数返回时的堆栈地址和返回值及参数值等信息。</li><li><code>call 函数(参数)</code>：调用程序中可见的函数，并传递“参数”，如：<code>call gdb_test(55)</code></li><li><code>quit</code>：简记为 <code>q</code> ，退出gdb</li></ul><h2 id="设置断点"><a href="#设置断点" class="headerlink" title="设置断点"></a>设置断点</h2><ul><li><code>break n</code> （简写<code>b n</code>）:在第n行处设置断点<br>（可以带上代码路径和代码名称： b OAGUPDATE.cpp:578）</li><li><code>b fn1 if a＞b</code>：条件断点设置</li><li><code>break func</code>（break缩写为b）：在函数func()的入口处设置断点，如：<code>break cb_button</code></li><li><code>delete 断点号n</code>：删除第n个断点</li><li><code>disable 断点号n</code>：暂停第n个断点</li><li><code>enable 断点号n</code>：开启第n个断点</li><li><code>clear 行号n</code>：清除第n行的断点</li><li><code>info b</code> （info breakpoints） ：显示当前程序的断点设置情况</li><li><code>delete breakpoints</code>：清除所有断点</li></ul><h2 id="查看源代码"><a href="#查看源代码" class="headerlink" title="查看源代码"></a>查看源代码</h2><ul><li><code>list</code> ：简记为 l ，其作用就是列出程序的源代码，默认每次显示10行。</li><li><code>list 行号</code>：将显示当前文件以“行号”为中心的前后10行代码，如：<code>list 12</code></li><li><code>list 函数名</code>：将显示“函数名”所在函数的源代码，如：<code>list main</code></li><li><code>list</code> ：不带参数，将接着上一次 list 命令的，输出下边的内容。</li></ul><h2 id="打印表达式"><a href="#打印表达式" class="headerlink" title="打印表达式"></a>打印表达式</h2><ul><li><code>print 表达式</code>：简记为 p ，其中“表达式”可以是任何当前正在被测试程序的有效表达式，比如当前正在调试C语言的程序，那么“表达式”可以是任何C语言的有效表达式，包括数字，变量甚至是函数调用。</li><li><code>print a</code>：将显示整数 a 的值</li><li><code>print ++a</code>：将把 a 中的值加1,并显示出来</li><li><code>print name</code>：将显示字符串 name 的值</li><li><code>print gdb_test(22)</code>：将以整数22作为参数调用 gdb_test() 函数</li><li><code>print gdb_test(a)</code>：将以变量 a 作为参数调用 gdb_test() 函数</li><li><code>display 表达式</code>：在单步运行时将非常有用，使用display命令设置一个表达式后，它将在每次单步进行指令后，紧接着输出被设置的表达式及值。如： display a</li><li><code>watch 表达式</code>：设置一个监视点，一旦被监视的“表达式”的值改变，gdb将强行终止正在被调试的程序。如： watch a</li><li><code>whatis</code> ：查询变量或函数</li><li><code>info function</code>： 查询函数</li><li><code>扩展info locals</code>： 显示当前堆栈页的所有变量</li></ul><h2 id="查询运行信息"><a href="#查询运行信息" class="headerlink" title="查询运行信息"></a>查询运行信息</h2><ul><li><code>where/bt</code> ：当前运行的堆栈列表；</li><li><code>bt backtrace</code> ：显示当前调用堆栈</li><li><code>up/down</code> ：改变堆栈显示的深度</li><li><code>set args 参数</code>:指定运行时的参数</li><li><code>show args</code>：查看设置好的参数</li><li><code>info program</code>： 来查看程序的是否在运行，进程号，被暂停的原因。</li></ul><h2 id="分割窗口"><a href="#分割窗口" class="headerlink" title="分割窗口"></a>分割窗口</h2><ul><li><code>layout</code>：用于分割窗口，可以一边查看代码，一边测试：</li><li><code>layout src</code>：显示源代码窗口</li><li><code>layout asm</code>：显示反汇编窗口</li><li><code>layout regs</code>：显示源代码/反汇编和CPU寄存器窗口</li><li><code>layout split</code>：显示源代码和反汇编窗口</li><li><code>Ctrl + L</code>：刷新窗口</li></ul><h1 id="gdb文件"><a href="#gdb文件" class="headerlink" title="gdb文件"></a>gdb文件</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ gdb hello -x demo.gdb</span><br></pre></td></tr></table></figure><p>可以将重复文件写入<code>demo.gdb</code>，这样每次开始调试就可先把重复的命令给执行了。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文介绍了gdb的调试使用方法以及一些实用命令。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="码农的基本修养" scheme="https://nonsense-j.top/categories/%E7%A0%81%E5%86%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%AE%E5%85%BB/"/>
    
    
      <category term="c/c++" scheme="https://nonsense-j.top/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>c/c++编译链接命令详解</title>
    <link href="https://nonsense-j.top/2021/03/09/c_c++%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nonsense-j.top/2021/03/09/c_c++%E7%BC%96%E8%AF%91%E9%93%BE%E6%8E%A5%E5%91%BD%E4%BB%A4%E8%AF%A6%E8%A7%A3/</id>
    <published>2021-03-09T01:54:14.000Z</published>
    <updated>2021-03-10T01:22:10.983Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要以g++编译c++程序为例子，综合了许多博主的博客并加入了个人理解，对g++编译和链接命令进行了深入的了解（一定程度上gcc也通用）。</p></div><a id="more"></a><h2 id="编译："><a href="#编译：" class="headerlink" title="编译："></a>编译：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -c demo.cpp -o demo.o -I [your include path]</span><br></pre></td></tr></table></figure><p>编译时，会将头文件与代码中的引用对应起来。</p><p><code>-I</code>就是指明头文件所存放的目录。<br>头文件（<code>.h</code>文件）中是对一些函数变量的声明，没有实现的代码，具体实现的代码在对应的链接库之中，链接库（<code>.a/.so</code>文件）是在之后的链接过程中加进程序中来的。</p><p><code>-o</code>便是将输出的文件重命名（默认是叫a.o）</p><h3 id="关键问题1：include-path去哪里找以及优先级？"><a href="#关键问题1：include-path去哪里找以及优先级？" class="headerlink" title="关键问题1：include path去哪里找以及优先级？"></a>关键问题1：include path去哪里找以及优先级？</h3><ol><li>先去看：编译时使用<code>-I</code>特别指明的路径（用户自定义）</li><li>再去查看<strong>环境变量</strong>：<ul><li>c : <strong>C_INCLUDE_PATH</strong></li><li>c++ : <strong>CPLUS_INCLUDE_PATH</strong></li></ul></li><li>最后看默认路径(gcc 和 g++ 命令几乎一样)：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">nonsense@nonchaos:~$ `g++ -<span class="built_in">print</span>-prog-name=cc1plus` -v</span><br><span class="line">ignoring nonexistent directory <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/9/include-fixed"</span></span><br><span class="line">ignoring nonexistent directory <span class="string">"/usr/lib/gcc/x86_64-linux-gnu/9/../../../../x86_64-linux-gnu/include"</span></span><br><span class="line"><span class="comment">#include "..." search starts here:</span></span><br><span class="line"><span class="comment">#include &lt;...&gt; search starts here:</span></span><br><span class="line"> /usr/include/c++/9</span><br><span class="line"> /usr/include/x86_64-linux-gnu/c++/9</span><br><span class="line"> /usr/include/c++/9/backward</span><br><span class="line"> /usr/lib/gcc/x86_64-linux-gnu/9/include</span><br><span class="line"> /usr/<span class="built_in">local</span>/include</span><br><span class="line"> /usr/include</span><br><span class="line">End of search list.</span><br></pre></td></tr></table></figure></li></ol><h3 id="关键问题2：include-lt-gt-和-include-“”区别"><a href="#关键问题2：include-lt-gt-和-include-“”区别" class="headerlink" title="关键问题2：include &lt;&gt; 和 include “”区别"></a>关键问题2：include &lt;&gt; 和 include “”区别</h3><p>简单的来说就是<code>&quot;&quot;</code>比<code>&lt;&gt;</code>范围更大，用<code>&quot;&quot;</code>肯定没错。<br>查看默认路径的命令里面其实就有这两个的区别。</p><p>关键在于：<code>&lt;&gt;</code>会去查找的路径就是上面我们提到的三个地方，而<code>“”</code>不仅会查看<code>&lt;&gt;</code>能查看的这些路径，还会去查看当前目录下的头文件（或者是你在””中定义的绝对路径，相关路径）.</p><p>假如某一个(c++)文件需要在编译的时候关联当前工作目录下的某一个<code>.h</code>头文件，有两种方法：</p><ul><li>在文件编写时，使用 <code>include &quot;xxx.h&quot;</code></li><li>编译时，使用<code>&quot;-I&quot;</code>将当前工作目录关联进来</li></ul><h2 id="链接："><a href="#链接：" class="headerlink" title="链接："></a>链接：</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ demo.o -o demo -L [your link library path] -lxxx</span><br></pre></td></tr></table></figure><p>目标文件（<code>.o</code>也是二进制文件）经过链接（Link）以后才能变成可执行文件。链接过程中，会将目标文件和系统组件（比如标准库、动态链接库等）结合起来，因此<br>链接得到的可执行文件和原来的目标文件大小往往会差比较大。<br>在上面这条链接命令中，会生成<strong>demo</strong>这一可执行文件。</p><p><code>-L</code>就是指明存放所需要链接的库的地址。<br>链接库（<code>.a</code>文件）是在之后的链接过程中加进程序中来的。</p><p><code>-o</code>还是将输出的文件重命名</p><p><code>-lxxx</code>指明使用的库，比如要使用test库，库文件名为<code>libtest.so</code>（动态库）或者<code>libtest.a</code>（静态库），那就加上<code>-ltest</code>即可。</p><p>关于动态库和静态库：二者的区别仅在于程序执行时所需的代码是在运行时动态加载的，还是在编译时静态加载的。</p><h3 id="关键问题1：链接库去哪里找以及优先级？"><a href="#关键问题1：链接库去哪里找以及优先级？" class="headerlink" title="关键问题1：链接库去哪里找以及优先级？"></a>关键问题1：链接库去哪里找以及优先级？</h3><ol><li>先去看：链接时使用<code>-L</code>特别指明的路径（用户自定义）</li><li>再去查看<strong>环境变量</strong>：<ul><li>静态库（链接时查找库文件地址）：<strong>LIBRARY_PATH</strong></li><li>动态库（运行时查找库文件地址）：<strong>LD_LIBRARY_PATH</strong></li></ul></li><li>最后看默认路径(比如<code>/usr/lib</code>等等)</li></ol><h3 id="关键问题2：为什么有时候链接动态链接库编译链接没问题，运行报错？"><a href="#关键问题2：为什么有时候链接动态链接库编译链接没问题，运行报错？" class="headerlink" title="关键问题2：为什么有时候链接动态链接库编译链接没问题，运行报错？"></a>关键问题2：为什么有时候链接动态链接库编译链接没问题，运行报错？</h3><p>注意到：GCC/G++提供了-L选项用于链接时指定要链接的库的路径，但是这个选项只限于编译时，在运行时，可执行文件并未记住链接库的路径，因此在程序初始化的时候，动态加载程序会报告找不到动态库错误。</p><p>要解决这一问题：</p><ul><li>编译时使用<code>-Wl,-rpath=</code> 指定程序运行时库搜索目录。</li><li>程序运行时会去看环境变量<strong>LD_LIBRARY_PATH</strong>，可以修改这个变量：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这一句表示在LD_LIBRARY_PATH前添加路径./yepanl</span></span><br><span class="line"><span class="built_in">export</span> LD_LIBRARY_PATH=./yepanl:<span class="variable">$LD_LIBRARY_PATH</span></span><br></pre></td></tr></table></figure>可以将一句话加到<code>~/.bashrc</code>文件中去，就可以保证终端一打开就修改了这个环境变量。</li><li>还有一种方法是：在/etc/ld.so.conf 中添加指定的链接库搜索路径（需要root权限），然后运行 /sbin/ldconfig，以达到刷新 /etc/ld.so.cache的效果。详细可以百度。</li></ul><p><em>参考博客：</em></p><ul><li><a href="https://blog.csdn.net/weixin_34191734/article/details/91871173" target="_blank" rel="noopener">GCC/G++选项 -Wl,—rpath=</a></li><li><a href="https://blog.csdn.net/sun172270102/article/details/50449241" target="_blank" rel="noopener">ubuntu下默认的头文件搜索路径</a></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要以g++编译c++程序为例子，综合了许多博主的博客并加入了个人理解，对g++编译和链接命令进行了深入的了解（一定程度上gcc也通用）。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="码农的基本修养" scheme="https://nonsense-j.top/categories/%E7%A0%81%E5%86%9C%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BF%AE%E5%85%BB/"/>
    
    
      <category term="c/c++" scheme="https://nonsense-j.top/tags/c-c/"/>
    
  </entry>
  
  <entry>
    <title>Plans for Tomorrow</title>
    <link href="https://nonsense-j.top/2021/03/08/Plans-for-Tomorrow/"/>
    <id>https://nonsense-j.top/2021/03/08/Plans-for-Tomorrow/</id>
    <published>2021-03-08T07:00:00.000Z</published>
    <updated>2021-03-21T12:43:55.909Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note danger no-icon"><p><strong>—— 记录明天的计划以及今天的总结</strong><br><em>Stay hungry Stay foolish!!!</em></p></div><a id="more"></a><h2 id="Day1：2021-3-8"><a href="#Day1：2021-3-8" class="headerlink" title="Day1：2021.3.8"></a>Day1：2021.3.8</h2><ul><li><del><strong>背单词</strong>：不背单词每日任务。</del></li><li><del><strong>下午14:00-15:30</strong>：重新整理博客。</del></li><li><del><strong>下午15:30-17:00</strong>：c和c++命令行编译的学习总结。</del></li><li><del><strong>晚上18:00-19:00</strong>：回忆ROS相关知识形成博客。</del></li><li><del><strong>晚上20:30-21:30</strong>：Leetcode网络简单题两道。</del></li></ul><div class="note info no-icon"><p><strong>- 碎碎念 -</strong><br><em>今天重新配置了博客，很久没用了，希望之后能再度使用起来。这个礼拜主要就是复习一下最近新学的知识，有时间就去Leetcode刷刷题。</em></p></div><h2 id="Day2：2021-3-9"><a href="#Day2：2021-3-9" class="headerlink" title="Day2：2021.3.9"></a>Day2：2021.3.9</h2><ul><li><del><strong>背单词</strong>：不背单词每日任务。</del></li><li><del><strong>上午8:00-10:00</strong>：看网课预习编译原理。</del></li><li><del><strong>下午14:30-17:00</strong>：Leetcode中等题两道。</del></li></ul><div class="note info no-icon"><p><strong>- 碎碎念 -</strong><br><em>悲催的一天，晚上去上机了，软件测试web实验还有五周就要ddl了，django还啥也不会，试着跑学长的demo也没跑通。总算搞懂了FIRST和FOLLOW集合计算了，但还是经常忘哈哈。</em></p></div><h2 id="Day3-6：2021-3-10-13"><a href="#Day3-6：2021-3-10-13" class="headerlink" title="Day3-6：2021.3.10-13"></a>Day3-6：2021.3.10-13</h2><ul><li><del><strong>背单词</strong>：不背单词每日任务。</del></li><li><del><strong>编译原理</strong>：复习自下而上的语法分析方法（FIRST、FOLLOW、FIRSTVT、LASTVT）。</del></li><li><del><strong>刷题</strong>：Leetcode中等题三道。</del></li></ul><div class="note info no-icon"><p><strong>- 朝花夕拾 -</strong><br>The reader kowns I had wrought hard to extirpate from my soul the germs of love there detected.<br><em>读者知道，我努力从自己内心深处剪除露头的爱的萌芽。</em><br><strong>- 碎碎念 -</strong><br><em>这几天都忙着请假去成都参加无人机培训的事以及各种公差，再加上没怎么整理博客，没有做具体安排，以后还是会尽量把每天的详细安排做好。星期五下午政教到五点一刻，我裂开。。。</em></p></div><h2 id="Day7：2021-3-14"><a href="#Day7：2021-3-14" class="headerlink" title="Day7：2021.3.14"></a>Day7：2021.3.14</h2><ul><li><del><strong>背单词</strong>：不背单词每日任务。</del></li><li><del><strong>中午</strong>：软件测试web界面设计。</del></li><li><del><strong>下午</strong>：编译原理作业完成。</del></li><li><del><strong>晚上</strong>：整理博客以及明日任务指指定。</del></li></ul><div class="note info no-icon"><p><strong>- 碎碎念 -</strong><br><em>又是睡到九点半的一天哈哈，上午在摸鱼，下午和晚上学习了。</em></p></div><h2 id="Day8：2021-3-14"><a href="#Day8：2021-3-14" class="headerlink" title="Day8：2021.3.14"></a>Day8：2021.3.14</h2><ul><li><del><strong>背单词</strong>：不背单词每日任务。</del></li><li><del><strong>上午8:00-10：00</strong>：回顾ROS知识，准备下午上课材料。</del></li><li><strong>下午以及晚上</strong>：看阿木实验室指南，必须把p600看完。</li><li><del><strong>晚上剩余时间</strong>：编译原理网课第11讲。</del></li></ul><div class="note info no-icon"><p><strong>- 碎碎念 -</strong><br><em>为了去成都的时候不至于啥也不会，明天必须把P600看完！</em></p></div><h2 id="Day9-15：2021-3-15-21"><a href="#Day9-15：2021-3-15-21" class="headerlink" title="Day9-15：2021.3.15-21"></a>Day9-15：2021.3.15-21</h2><ul><li><del>出发去成都之前：阅读AmovLab参考文档</del></li><li><del>在成都—培训：学习了无人车以及无人机的相关知识</del></li><li><del>在成都—培训后：休息了一天</del></li><li><del>回学校：整理收获，写JavaCC实训</del></li></ul><div class="note info no-icon"><p><strong>- 碎碎念 -</strong><br>这个礼拜基本就是在忙去成都的事，总结内容：<br><a href>AmovLab培训要点总结</a><br><a href>成都印象</a></p></div><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;&lt;strong&gt;—— 记录明天的计划以及今天的总结&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Stay hungry Stay foolish!!!&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="每日打卡计划" scheme="https://nonsense-j.top/categories/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/"/>
    
      <category term="计划打卡" scheme="https://nonsense-j.top/categories/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/%E8%AE%A1%E5%88%92%E6%89%93%E5%8D%A1/"/>
    
    
      <category term="Plans" scheme="https://nonsense-j.top/tags/Plans/"/>
    
  </entry>
  
  <entry>
    <title>逆向：crackme入门详解</title>
    <link href="https://nonsense-j.top/2020/09/10/re-crackme%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nonsense-j.top/2020/09/10/re-crackme%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-10T09:45:26.000Z</published>
    <updated>2021-03-09T02:03:35.281Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文是一篇writeup，里面是对两个入门crackme程序的逆向分析<br>第一个是《加密与解密》中讲win32的API时用到的。<br>第二个参考博客：<a href="https://bbs.pediy.com/thread-261876.htm" target="_blank" rel="noopener">[分享]逆向破解一个简单的crackme</a></p></div><a id="more"></a><h2 id="一、Ollydbg的使用"><a href="#一、Ollydbg的使用" class="headerlink" title="一、Ollydbg的使用"></a>一、Ollydbg的使用</h2><ul><li>调试的基本操作：<strong>F7</strong>：单步步进；<strong>F8</strong>：单步布过；<strong>Ctrl+F9</strong>：直到出现ret指令就中断；<strong>F9</strong>：运行程序；<strong>Ctrl+F2</strong>：重新运行；<strong>F12</strong>：暂停；<strong>F2</strong>：设置断点。</li><li><strong>Alt+B</strong>：查看所有的断点；<strong>Alt+K</strong>：查看函数调用情况；<strong>Ctrl+G</strong>：表示搜索；<strong>Ctrl+N</strong>：查找当前所有模块的名称；</li><li>拓展程序：右键直接查找字符串；使用cmd设置断点在某个函数（<code>bp GetDlgItemTextA</code>）。</li><li>其他操作：反汇编窗口右键某行指令可以直接设置New origin here。</li></ul><h2 id="二、第一个crackme"><a href="#二、第一个crackme" class="headerlink" title="二、第一个crackme"></a>二、第一个crackme</h2><h3 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h3><p>&emsp;&emsp;这个ceackme程序是书上给的第一个程序，这里使用的是ANSI版，首先直接运行一遍看看是什么东西。随便输入用户名和序列号后显示，显然我们要做的就是正确输入用户名和序列号。</p><p><img alt="01_程序运行界面" style="zoom:67%" data-src="https://tva4.sinaimg.cn/large/007EYOWmgy1gilthtgwtrj30b5074q3l.jpg"></p><p>&emsp;&emsp;放到Ollydbg中看一下，目标很明确，就是找到关键跳转点。有两个思路：</p><ul><li><strong>思路一</strong>：查找中文字符串，找到失败提示符的位置，其附近应该有成功的字符串，这两个地方如果功能是打印字符串，那么关键跳转就会出现在它们之上。</li><li><strong>思路二</strong>：OD载入程序&rarr;<code>F9</code>运行程序&rarr;输入假码注册程序,确认，弹出错误提示框&rarr;<code>F12</code>暂停程序运行-&rarr;<code>ALT+K</code>查看调用堆栈&rarr;找到来自主程序的调用&rarr;双击进去&rarr;，关键CALL和关键跳就在其上面附近。一般在其上有提示注册成功的文本信息，在成功和失败提示文本的上面有一个比较，比较下面有一个跳转。在比较的上面的第一个CALL就是关键CALL了。</li><li><strong>思路三</strong>：查找关键API函数设断点，<code>GetDlgItemTextA</code>函数，这个函数用于获取对话框文本，然后一步步往下执行直到找到关键跳转就可以了。</li></ul><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>&emsp;&emsp;查找字符，找到了失败与成功的提示符如下，往上面看并没有发现比较也没有明显的call指令。同时注意到，失败提示信息起始地址<code>0x405038</code>，成功提示信息起始地址<code>0x405050</code>，还有一个<code>输出字符要大于四个</code>的提示符（字符限制提示符），而且提示信息都保存在一起。</p><p>​<img alt="02_提示符位置" style="zoom:67%" data-src="https://tvax1.sinaimg.cn/large/007EYOWmgy1giltjvgt65j30pq0dumzq.jpg"></p><p>&emsp;&emsp;尝试思路二，<code>F12</code>暂停后找到主程序的调用函数，是<code>DialogBoxParamA</code>函数，这个函数就是显示提示框的函数。往上一看，果然看到了失败提示信息（<strong>因为是ASCII的中文信息，最好是用那个插件先搜索一下，这样可以把所有的ASCII中文显示出来</strong>）：</p><p><img alt="03_三个提示符与关键跳转" style="zoom:67%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltmgs4xrj310j0nmn2a.jpg"></p><p>&emsp;&emsp;发现有三个失败提示符，而且失败提示信息都保存在<code>0x4054E4</code>位置，结合一开始看到的提示符有三种，可以判断这三个之间一一对应。给三个提示符都设断点，先运行一次输入用户名少于四个字符，停在第三个断点处，然后输入四个字以上，停在第二个断点，那么各个断电对应就很明了了。往上查看关键跳转，显示判断字符数，然后判断成功与否，这里只考虑成功与否为关键跳转。</p><p>&emsp;&emsp;分析关键跳转的两个分支，显然这是把原来不同位置的提示符全部压到对应的不同栈里，然后再根据具体输入情况选择不同的分支将对应栈里的提示信息存到<code>0x4054E4</code>以便之后输出。</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>&emsp;&emsp;书上给的方法，先<code>Ctrl+G</code>或者<code>Ctrl+N</code>找到<code>GetDlgItemTextA</code>设断点，一步一步分析即可。具体步骤：首先<code>Ctrl+G</code>搜索<code>GetDlgItemTextA</code>函数进去后<code>Ctrl+F9</code>（<code>Alt+F9</code>）出来，一步一步往下单步步过，然后你就会发现在一个神奇的地方传进去了失败提示符，这个地方前一个跳转就是关键跳转（可以参考上面给的图）。</p><p><img alt="04_失败提示符出现" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltncvo4uj30vl00rjrc.jpg"></p><h3 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h3><p>&emsp;&emsp;要破解最简单的办法就是在跳转的地方改状态寄存器的<strong><code>Z</code></strong>的取值，一改就可以看见正确提示符输出。当然还可以把跳转位置空（用<code>nop</code>指令，空格快捷键），这种方法可以保存修改的文件使得可执行文件被永久暴力破解，不论输入什么用户名（大于四个字符）都可以随便通过。</p><p>&emsp;&emsp;保存修改后的文件的方法：反汇编面板里右键copy to executive &rarr; save file</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>&emsp;&emsp;在关键跳转之前，提示符压栈之后，调用了一个函数，该函数的参数从左到右依次是密码，用户名，用户名长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">004011E5   .  E8 56010000   call    00401340</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;设断点，进函数，记得进函数之后看一下栈内情况，找到用户名与序列号在栈中的位置。可以先运行进去逐步分析，这样有助于理解各个寄存器的作用。注意要先找到存放参数的寄存器，再看大体结构了解是否有循环并找出循环系数。</p><p>&emsp;&emsp;最终写成<code>c++</code>的形式就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GenRegCode</span><span class="params">( TCHAR  *rCode, TCHAR  *name ,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> code=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">3</span>,j=<span class="number">0</span>;i&lt;len;i++,j++)</span><br><span class="line">    &#123;<span class="keyword">if</span>(j&gt;<span class="number">7</span>) j=<span class="number">0</span>;</span><br><span class="line">      code+=((BYTE)name[i])*Table[j];</span><br><span class="line">    &#125;</span><br><span class="line">  wsprintf(name,TEXT(<span class="string">"%ld"</span>),code);</span><br><span class="line">  <span class="keyword">if</span>(lstrcmp(rCode, name)==<span class="number">0</span>)      <span class="comment">//比较真假序列号，这里为了省事，直接比较了</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其实一直运行下去就会发现，正确密码是根据用户名生成的，这个函数就是比对输入的密码与正确密码，如果跟踪到最后，其实是可以看到你输入的用户名对应的正确密码的。pediy对应的密码就是2470。接下来解释一下<code>wsprintf</code>这个函数：就是将数字转化为字符，<code>%ld</code>表示<code>long</code>整型。</p><p>&emsp;&emsp;根据算法还可以写一个注册机，这个还没学过，挖个坑先。</p><h2 id="三、第二个crackme"><a href="#三、第二个crackme" class="headerlink" title="三、第二个crackme"></a>三、第二个crackme</h2><p>基本分析</p><p>&emsp;&emsp;这个crackme是出自看雪论坛上的一个大佬写的新手教程，直接运行根据提示知道也是要输入用户名和注册码，成功匹配会出现一个朱茵的照片。值得注意的是输完用户名和注册码要点击内框才算开始验证（如果啥也不点就没有办法调试了）。</p><p><img alt="05_程序运行界面" style="zoom:45%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltofp3j5j30e20g33zb.jpg"></p><p>&emsp;&emsp;暂时没有什么头绪，直接丢到OD里去，查找中文字符串，凭着直觉搜索了一下<code>&quot;成功&quot;</code>和<code>&quot;失败&quot;</code>，果然找到了成功提示符，但是失败提示符莫得。</p><p><img alt="06_中文字符与关键跳转" style="zoom:67%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltoutnkmj30ue0lzdjv.jpg"></p><p>&emsp;&emsp;对中文字符串的上下文基本分析，这是再一个函数里（从<code>push ebp</code>到<code>ret</code>之间），观察附近的跳转情况发现下面就有一个跳转末端，显然这个跳转会导致跳过输出成功信息。接下来就是验证猜测，设断点，调试即可。很顺利的是，确实就是这里是关键跳转。</p><h3 id="爆破法-1"><a href="#爆破法-1" class="headerlink" title="爆破法"></a>爆破法</h3><p>&emsp;&emsp;在关键跳转的地方设置断点，然后输入用户名、注册码，点击一下内框，程序会停在断点处，为了破解，可以修改状态寄存器中的<strong><code>z</code></strong>位，或者改成<code>nop</code>，都是可以的。最终页面：</p><p><img alt="07_运行成功示例" style="zoom:45%" data-src="https://tva2.sinaimg.cn/large/007EYOWmgy1giltp8rh5bj30cj0dgq5l.jpg"></p><h3 id="算法简析"><a href="#算法简析" class="headerlink" title="算法简析"></a>算法简析</h3><p>0x3E要想成功赋值到[EBX+0X30C]的话，JNZ必须不能跳转。</p><p>向上翻，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp，esp</span><br></pre></td></tr></table></figure><p>也就是函数的起始位置，下断点(其他断点清理掉，只留下这一个断点)，尝试分析这段函数</p><p>下完断点之后，发现不管是单击还是双击都没有反应，很奇怪，按理说不应该，理一下上面分析的逻辑：</p><p><strong>①比对[ESI+0X30C]和0x85，只有比对成功了才会跳转到成功的界面</strong></p><p><strong>②查找[ESI+0X30C]是怎么被赋值成功0x85的</strong>（这里是直接搜索0x85，search for &rarr; all constants）</p><p><strong>③只有[ESI+300C]和0x3E比对成功后才会将0x85赋值给[ESI+0X30C]</strong></p><p><strong>④0x3E赋值给[ESI+300C]的前一条指令JNZ必须不能跳转</strong></p><p>经过分析，重新加载程序，当注册码输入的时候，OD就断下来了，由此判断这个程序的功能是只要输入了注册码，马上就触发响应事件。一步步分析最后可以得到整个程序的通用注册码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑头Sun Bird+字符串(账号长度+5)+dseloffc-012-OK+字符串(账号)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文是一篇writeup，里面是对两个入门crackme程序的逆向分析&lt;br&gt;第一个是《加密与解密》中讲win32的API时用到的。&lt;br&gt;第二个参考博客：&lt;a href=&quot;https://bbs.pediy.com/thread-261876.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[分享]逆向破解一个简单的crackme&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="信息安全" scheme="https://nonsense-j.top/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="逆向入门" scheme="https://nonsense-j.top/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="crackme Reverse" scheme="https://nonsense-j.top/tags/crackme-Reverse/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基本概念</title>
    <link href="https://nonsense-j.top/2020/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://nonsense-j.top/2020/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-08-04T08:03:15.000Z</published>
    <updated>2020-08-05T10:33:57.073Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要讲述机器学习中的一些基本知识与概念的介绍，一直更新。<br>参考了知乎回答以及搜索引擎结果。</p></div><a id="more"></a><h2 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h2><p>&emsp;&emsp;MNIST数据集(Mixed National Institute of Standards and Technology database)是美国国家标准与技术研究院收集整理的大型手写数字数据库,包含60,000个示例的训练集以及10,000个示例的测试集。</p><ul><li><p>Training set images: train-images-idx3-ubyte.gz</p></li><li><p>Training set labels: train-labels-idx1-ubyte.gz</p></li><li><p>Test set images: t10k-images-idx3-ubyte.gz</p></li><li><p>Test set labels: t10k-labels-idx1-ubyte.gz</p></li></ul><p>&emsp;&emsp;图片都是以字节的形式存储的，要想读取可以使用python中的<code>numpy</code>库。一个图片是一个样本（对应行），而图片都是划分为</p><script type="math/tex;mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script><p>&emsp;&emsp;图片都是以字节的形式存储的，要想读取可以使用python中的<code>numpy</code>库。一个图片是一个样本（对应行）</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要讲述机器学习中的一些基本知识与概念的介绍，一直更新。&lt;br&gt;参考了知乎回答以及搜索引擎结果。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nonsense-j.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习入门" scheme="https://nonsense-j.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Machine Learing" scheme="https://nonsense-j.top/tags/Machine-Learing/"/>
    
  </entry>
  
  <entry>
    <title>pwn：ELF保护机制</title>
    <link href="https://nonsense-j.top/2019/12/09/pwn-ELF%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>https://nonsense-j.top/2019/12/09/pwn-ELF%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2019-12-09T07:01:11.000Z</published>
    <updated>2021-03-09T02:04:24.821Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要讲述checksec得到的ELF文件保护机制的意义。<br>参考博客：<a href="https://www.cnblogs.com/nul1/p/10944265.html" target="_blank" rel="noopener">二进制的保护机制</a></p></div><a id="more"></a><h2 id="checksec指令"><a href="#checksec指令" class="headerlink" title="checksec指令"></a>checksec指令</h2><p>&emsp;&emsp;在CTF刷题过程中，给定一个二进制文件（ELF）,首先就要对其保护机制判断。一般使用checksec进行查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在gdb中执行：</span><br><span class="line">gdb&gt; checksec <span class="built_in">test</span></span><br><span class="line">Canary                      : No</span><br><span class="line">NX                          : Yes</span><br><span class="line">PIE                         : No</span><br><span class="line">Fortify                     : No</span><br><span class="line">RelRO                       : Partial</span><br><span class="line"></span><br><span class="line">直接在shell中执行：</span><br><span class="line">$ checksec <span class="built_in">test</span></span><br><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>这个指令告诉了我们当前二进制文件的指令架构以及基本保护机制</p><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><h3 id="Canary-———栈保护"><a href="#Canary-———栈保护" class="headerlink" title="Canary ———栈保护"></a>Canary ———栈保护</h3><p>&emsp;&emsp;这个选项表示栈保护功能有没有开启。</p><div class="note primary"><p>栈溢出保护是一种<strong>缓冲区溢出</strong>攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 <em>shellcode</em> 能够得到执行。<br>当启用栈保护后，函数开始执行的时候会先往栈里插入<strong>cookie</strong>信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p></div><p>如果栈中开启Canary found，那么就不能用直接用溢出的方法覆盖栈中返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过</p><h3 id="NX-DEP-———堆栈不可执行"><a href="#NX-DEP-———堆栈不可执行" class="headerlink" title="NX/DEP ———堆栈不可执行"></a>NX/DEP ———堆栈不可执行</h3><div class="note primary"><p>NX就是表示“not executable”，基本原理就是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p></div><h3 id="PIE-ASLR-———地址随机化"><a href="#PIE-ASLR-———地址随机化" class="headerlink" title="PIE/ASLR ———地址随机化"></a>PIE/ASLR ———地址随机化</h3><div class="note primary"><ul><li>0：表示关闭进程地址空间随机化。</li><li>1：表示将mmap的基址，stack和vdso页面随机化。</li><li>2：表示在1的基础上增加堆（heap）的随机化。</li></ul></div><p>&emsp;&emsp;如果进程开启这个地址随机化选项就意味着进程每次运行的时候地址都会变化，而如果没有开PIE的话那么No PIE (0x400000)，括号内的数据就是进程的基地址</p><p>&emsp;&emsp;ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码，可以防范基于Ret2libc方式的针对DEP的攻击</p><h3 id="Fortify"><a href="#Fortify" class="headerlink" title="Fortify"></a>Fortify</h3><p>FORTIFY_SOURCE机制对格式化字符串有两个限制：<br></p><div class="note primary"><ol><li>包含%n的格式化字符串不能位于进程内存中的可写地址。</li><li>当使用位置参数时，必须使用范围内的所有参数。所以如果要使用%7$x，你必须同时使用1,2,3,4,5和6</li></ol></div><p></p><h3 id="RelRO"><a href="#RelRO" class="headerlink" title="RelRO"></a>RelRO</h3><p>&emsp;&emsp;在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处。</p><p>&emsp;&emsp;GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</p><p>&emsp;&emsp;设置符号重定向表格为只读或在进程启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为“Partial RELRO”，说明对GOT表具有写权限。如果开启FULL RELRO，意味着我们无法修改got表。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要讲述checksec得到的ELF文件保护机制的意义。&lt;br&gt;参考博客：&lt;a href=&quot;https://www.cnblogs.com/nul1/p/10944265.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二进制的保护机制&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="信息安全" scheme="https://nonsense-j.top/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/"/>
    
      <category term="Pwn学习" scheme="https://nonsense-j.top/categories/%E4%BF%A1%E6%81%AF%E5%AE%89%E5%85%A8/Pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Pwn" scheme="https://nonsense-j.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn：格式化字符串漏洞</title>
    <link href="https://nonsense-j.top/2019/11/23/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://nonsense-j.top/2019/11/23/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-11-23T13:29:45.000Z</published>
    <updated>2020-09-07T13:07:38.177Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本 pwn 例题基于攻防世界一道关于格式化字符串漏洞的<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5050&amp;page=1" target="_blank" rel="noopener">新手题</a><br>参考博客： <a href="https://www.anquanke.com/post/id/85785" target="_blank" rel="noopener">原理详解-安全客</a> <a href="https://veritas501.space/2017/04/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">具体实现-</a></p></div><a id="more"></a><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="格式化字符"><a href="#格式化字符" class="headerlink" title="格式化字符"></a>格式化字符</h3><div class="note primary"><p>%d - 十进制 - 输出十进制整数<br>%s - 字符串 - 从<strong>内存</strong>中读取字符串<br>%c - 字符 - 输出字符<br>%x - 十六进制 - 输出十六进制数<br>%p - 指针 - 指针地址，输出不够 8 位就左边补零<br>%n - 输出在此之前输出的字符数</p></div><h3 id="什么是格式化字符串漏洞"><a href="#什么是格式化字符串漏洞" class="headerlink" title="什么是格式化字符串漏洞"></a>什么是格式化字符串漏洞</h3><div class="note default"><p>格式化字符串漏洞的解释为“软件使用了格式化字符串作为参数，且该格式化字符串来自外部输入”。会触发该漏洞的函数很有限，主要就是 printf、sprintf、fprintf 等 print 家族函数。</p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure><p>在这个函数中一旦没有注明 format 格式，由于printf允许参数个数不固定，故printf会自动将这段字符当作format参数，而用其后内存中的数据匹配format参数。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(str)</span><br></pre></td></tr></table></figure><p>在这一段代码中 str 来自于用户的可控输入，用户完全可以在输入时嵌入格式化字符(%s,%n之类)，</p><p><img alt="stack1.png" data-src="https://i.loli.net/2019/11/24/lsPE2LzMuCd3oyF.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本 pwn 例题基于攻防世界一道关于格式化字符串漏洞的&lt;a href=&quot;https://adworld.xctf.org.cn/task/answer?type=pwn&amp;amp;number=2&amp;amp;grade=0&amp;amp;id=5050&amp;amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;新手题&lt;/a&gt;&lt;br&gt;参考博客： &lt;a href=&quot;https://www.anquanke.com/post/id/85785&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原理详解-安全客&lt;/a&gt; &lt;a href=&quot;https://veritas501.space/2017/04/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;具体实现-&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="二进制安全" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="Pwn学习" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Pwn" scheme="https://nonsense-j.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hexo操作记录</title>
    <link href="https://nonsense-j.top/2019/11/22/Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://nonsense-j.top/2019/11/22/Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2019-11-21T17:41:22.000Z</published>
    <updated>2020-09-07T16:49:50.801Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要记录本人在配置博客时的一些基本操作，以及自定义博客的注意事项。<br>仅用于自己查询。</p></div><a id="more"></a><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><h4 id="对整个hexo项目的个人理解"><a href="#对整个hexo项目的个人理解" class="headerlink" title="对整个hexo项目的个人理解"></a>对整个hexo项目的个人理解</h4><p>&emsp;&emsp;总的配置文件有两个，都叫做<code>_config.yml</code>，一个是<code>hexo</code>的配置文件（总配置文件），一个是<code>next</code>主题的配置文件（主题配置文件）。在总配置文件中定义的是博客基本信息，包括博主基本信息，侧栏头像，部署在哪，以及全局的一些插件（搜索，neat压缩，seo设置）；在主题配置文件中主要是主题的一些特性设置，主要是说明了页面的具体排布（指定了<code>myblog/source/_data/styles.styl</code>）以及一些页面上用到的插件（js）等等。<br>&emsp;&emsp;在<code>style.styl</code>中可以对页面格式进行直接调整，可以使用浏览器<code>F12</code>辅助，用到的都是基本的<code>css</code>知识。但其实页面的基础控制在<code>myblog/themes/next/source/css/_variables/base.styl</code>中，包括全局字体，字体大小，行距等等，在这里一般修改全局的设置，找到对应项改变<br>即可。<br>&emsp;&emsp;页面使用到的图片都在next主题目录中定义，定位图片：<code>/images/avatar.jpeg</code>。</p><h4 id="主页文章按照修改时间进行排序"><a href="#主页文章按照修改时间进行排序" class="headerlink" title="主页文章按照修改时间进行排序"></a>主页文章按照修改时间进行排序</h4><div class="note warning no-icon"><p>没有用的操作：找到主配置文件 _config.yml，然后修改 index_generator 的 order_by 为 -updated</p></div><p>正确方法是找到<code>node_modules/hexo-generator-index-pin-top/lib/generator.js</code>添加以下代码（<a href="https://gsy00517.github.io/hexo20200207151318/" target="_blank" rel="noopener">原文链接</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 当两篇文章top都有定义时</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.updated - a.updated; <span class="comment">// 若top值一样，则按照文章更新日期降序排列</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下两种情况是若只有一篇文章top有定义，则将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123; <span class="comment">//上一条已解释</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.updated - a.updated; <span class="comment">// 若都没定义，则按照文章更新日期降序排列</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="修改全局字体或者局部字体"><a href="#修改全局字体或者局部字体" class="headerlink" title="修改全局字体或者局部字体"></a>修改全局字体或者局部字体</h4><p>&emsp;&emsp;这里的字体都是自定义字体，不是<code>google fonts</code>，方式就是在<code>base.styl</code>或者<code>style.styl</code>中定义字体引入</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    <span class="comment">/* 字体名称随意起 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: zzAw;</span><br><span class="line">    <span class="comment">/*你下载字体所在的位置*/</span></span><br><span class="line">    src: url('/fonts/zzAw.ttf');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果要使用字体只要在相应css层中改变<code>font-family</code>即可，全局字体就是直接改变<code>base.styl</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families.</span></span><br><span class="line">$font-family-chinese      = zzAw, sans-serif; // 没有zzAw的情况下选用sans-serif字体</span><br></pre></td></tr></table></figure><h3 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h3><h4 id="首页显示"><a href="#首页显示" class="headerlink" title="首页显示"></a>首页显示</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tags: [Machine Learing] // 添加多个标签</span><br><span class="line">/<span class="emphasis">* 添加子目录，下面的是上面的子目录 *</span>/</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">  - </span>机器学习</span><br><span class="line"><span class="bullet">  - </span>机器学习入门</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span> // 表示到这里折叠</span><br></pre></td></tr></table></figure><h4 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;</span><br></pre></td></tr></table></figure><h4 id="四种特殊的书写格式"><a href="#四种特殊的书写格式" class="headerlink" title="四种特殊的书写格式"></a>四种特殊的书写格式</h4><p><img alt="四种格式" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1ghevn3nn34j30ot05qmx5.jpg"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon May 31 2021 15:04:35 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要记录本人在配置博客时的一些基本操作，以及自定义博客的注意事项。&lt;br&gt;仅用于自己查询。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="博客设置" scheme="https://nonsense-j.top/categories/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="https://nonsense-j.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
