<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Life is a Journey</title>
  
  <subtitle>陌上花开~ | 可缓缓归矣</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://nonsense-j.top/"/>
  <updated>2021-03-08T08:12:59.437Z</updated>
  <id>https://nonsense-j.top/</id>
  
  <author>
    <name>Nonsense</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Plans for Tomorrow</title>
    <link href="https://nonsense-j.top/2021/03/08/Plans-for-Tomorrow/"/>
    <id>https://nonsense-j.top/2021/03/08/Plans-for-Tomorrow/</id>
    <published>2021-03-08T07:00:00.000Z</published>
    <updated>2021-03-08T08:12:59.437Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Tue Mar 09 2021 08:20:57 GMT+0800 (GMT+08:00) --><div class="note danger no-icon"><p><strong>—— 记录明天的计划以及今天的总结</strong><br><em>Stay hungry Stay foolish!!!</em></p></div><a id="more"></a><h2 id="Day1：2021-3-8"><a href="#Day1：2021-3-8" class="headerlink" title="Day1：2021.3.8"></a>Day1：2021.3.8</h2><ul><li><p><del><strong>背单词</strong>：不背单词每日任务。</del></p></li><li><p><del><strong>下午14:00-15:30</strong>：重新整理博客。</del></p></li><li><p><strong>下午15:30-17:00</strong>：c和c++命令行编译的学习总结。</p></li><li><p><strong>晚上18:00-19:00</strong>：回忆ROS相关知识形成博客。</p></li><li><p><strong>晚上19:00-20:30</strong>：ROS进阶学习。</p></li><li><p><strong>晚上20:30-21:30</strong>：Leetcode网络简单题两道。</p></li></ul><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Tue Mar 09 2021 08:20:57 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note danger no-icon&quot;&gt;&lt;p&gt;&lt;strong&gt;—— 记录明天的计划以及今天的总结&lt;/strong&gt;&lt;br&gt;&lt;em&gt;Stay hungry Stay foolish!!!&lt;/em&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="每日打卡计划" scheme="https://nonsense-j.top/categories/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/"/>
    
      <category term="计划打卡" scheme="https://nonsense-j.top/categories/%E6%AF%8F%E6%97%A5%E6%89%93%E5%8D%A1%E8%AE%A1%E5%88%92/%E8%AE%A1%E5%88%92%E6%89%93%E5%8D%A1/"/>
    
    
      <category term="Plans" scheme="https://nonsense-j.top/tags/Plans/"/>
    
  </entry>
  
  <entry>
    <title>逆向：crackme入门详解</title>
    <link href="https://nonsense-j.top/2020/09/10/re-crackme%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/"/>
    <id>https://nonsense-j.top/2020/09/10/re-crackme%E5%85%A5%E9%97%A8%E8%AF%A6%E8%A7%A3/</id>
    <published>2020-09-10T09:45:26.000Z</published>
    <updated>2021-03-08T07:31:10.540Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文是一篇writeup，里面是对两个入门crackme程序的逆向分析<br>第一个是《加密与解密》中讲win32的API时用到的。<br>第二个参考博客：<a href="https://bbs.pediy.com/thread-261876.htm" target="_blank" rel="noopener">[分享]逆向破解一个简单的crackme</a></p></div><a id="more"></a><h2 id="一、Ollydbg的使用"><a href="#一、Ollydbg的使用" class="headerlink" title="一、Ollydbg的使用"></a>一、Ollydbg的使用</h2><ul><li>调试的基本操作：<strong>F7</strong>：单步步进；<strong>F8</strong>：单步布过；<strong>Ctrl+F9</strong>：直到出现ret指令就中断；<strong>F9</strong>：运行程序；<strong>Ctrl+F2</strong>：重新运行；<strong>F12</strong>：暂停；<strong>F2</strong>：设置断点。</li><li><strong>Alt+B</strong>：查看所有的断点；<strong>Alt+K</strong>：查看函数调用情况；<strong>Ctrl+G</strong>：表示搜索；<strong>Ctrl+N</strong>：查找当前所有模块的名称；</li><li>拓展程序：右键直接查找字符串；使用cmd设置断点在某个函数（<code>bp GetDlgItemTextA</code>）。</li><li>其他操作：反汇编窗口右键某行指令可以直接设置New origin here。</li></ul><h2 id="二、第一个crackme"><a href="#二、第一个crackme" class="headerlink" title="二、第一个crackme"></a>二、第一个crackme</h2><h3 id="基本分析"><a href="#基本分析" class="headerlink" title="基本分析"></a>基本分析</h3><p>&emsp;&emsp;这个ceackme程序是书上给的第一个程序，这里使用的是ANSI版，首先直接运行一遍看看是什么东西。随便输入用户名和序列号后显示，显然我们要做的就是正确输入用户名和序列号。</p><p><img alt="01_程序运行界面" style="zoom:67%" data-src="https://tva4.sinaimg.cn/large/007EYOWmgy1gilthtgwtrj30b5074q3l.jpg"></p><p>&emsp;&emsp;放到Ollydbg中看一下，目标很明确，就是找到关键跳转点。有两个思路：</p><ul><li><strong>思路一</strong>：查找中文字符串，找到失败提示符的位置，其附近应该有成功的字符串，这两个地方如果功能是打印字符串，那么关键跳转就会出现在它们之上。</li><li><strong>思路二</strong>：OD载入程序&rarr;<code>F9</code>运行程序&rarr;输入假码注册程序,确认，弹出错误提示框&rarr;<code>F12</code>暂停程序运行-&rarr;<code>ALT+K</code>查看调用堆栈&rarr;找到来自主程序的调用&rarr;双击进去&rarr;，关键CALL和关键跳就在其上面附近。一般在其上有提示注册成功的文本信息，在成功和失败提示文本的上面有一个比较，比较下面有一个跳转。在比较的上面的第一个CALL就是关键CALL了。</li><li><strong>思路三</strong>：查找关键API函数设断点，<code>GetDlgItemTextA</code>函数，这个函数用于获取对话框文本，然后一步步往下执行直到找到关键跳转就可以了。</li></ul><h3 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h3><p>&emsp;&emsp;查找字符，找到了失败与成功的提示符如下，往上面看并没有发现比较也没有明显的call指令。同时注意到，失败提示信息起始地址<code>0x405038</code>，成功提示信息起始地址<code>0x405050</code>，还有一个<code>输出字符要大于四个</code>的提示符（字符限制提示符），而且提示信息都保存在一起。</p><p>​<img alt="02_提示符位置" style="zoom:67%" data-src="https://tvax1.sinaimg.cn/large/007EYOWmgy1giltjvgt65j30pq0dumzq.jpg"></p><p>&emsp;&emsp;尝试思路二，<code>F12</code>暂停后找到主程序的调用函数，是<code>DialogBoxParamA</code>函数，这个函数就是显示提示框的函数。往上一看，果然看到了失败提示信息（<strong>因为是ASCII的中文信息，最好是用那个插件先搜索一下，这样可以把所有的ASCII中文显示出来</strong>）：</p><p><img alt="03_三个提示符与关键跳转" style="zoom:67%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltmgs4xrj310j0nmn2a.jpg"></p><p>&emsp;&emsp;发现有三个失败提示符，而且失败提示信息都保存在<code>0x4054E4</code>位置，结合一开始看到的提示符有三种，可以判断这三个之间一一对应。给三个提示符都设断点，先运行一次输入用户名少于四个字符，停在第三个断点处，然后输入四个字以上，停在第二个断点，那么各个断电对应就很明了了。往上查看关键跳转，显示判断字符数，然后判断成功与否，这里只考虑成功与否为关键跳转。</p><p>&emsp;&emsp;分析关键跳转的两个分支，显然这是把原来不同位置的提示符全部压到对应的不同栈里，然后再根据具体输入情况选择不同的分支将对应栈里的提示信息存到<code>0x4054E4</code>以便之后输出。</p><h3 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h3><p>&emsp;&emsp;书上给的方法，先<code>Ctrl+G</code>或者<code>Ctrl+N</code>找到<code>GetDlgItemTextA</code>设断点，一步一步分析即可。具体步骤：首先<code>Ctrl+G</code>搜索<code>GetDlgItemTextA</code>函数进去后<code>Ctrl+F9</code>（<code>Alt+F9</code>）出来，一步一步往下单步步过，然后你就会发现在一个神奇的地方传进去了失败提示符，这个地方前一个跳转就是关键跳转（可以参考上面给的图）。</p><p><img alt="04_失败提示符出现" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltncvo4uj30vl00rjrc.jpg"></p><h3 id="爆破法"><a href="#爆破法" class="headerlink" title="爆破法"></a>爆破法</h3><p>&emsp;&emsp;要破解最简单的办法就是在跳转的地方改状态寄存器的<strong><code>Z</code></strong>的取值，一改就可以看见正确提示符输出。当然还可以把跳转位置空（用<code>nop</code>指令，空格快捷键），这种方法可以保存修改的文件使得可执行文件被永久暴力破解，不论输入什么用户名（大于四个字符）都可以随便通过。</p><p>&emsp;&emsp;保存修改后的文件的方法：反汇编面板里右键copy to executive &rarr; save file</p><h3 id="算法分析"><a href="#算法分析" class="headerlink" title="算法分析"></a>算法分析</h3><p>&emsp;&emsp;在关键跳转之前，提示符压栈之后，调用了一个函数，该函数的参数从左到右依次是密码，用户名，用户名长度。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">004011E5   .  E8 56010000   call    00401340</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;设断点，进函数，记得进函数之后看一下栈内情况，找到用户名与序列号在栈中的位置。可以先运行进去逐步分析，这样有助于理解各个寄存器的作用。注意要先找到存放参数的寄存器，再看大体结构了解是否有循环并找出循环系数。</p><p>&emsp;&emsp;最终写成<code>c++</code>的形式就是：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">BOOL <span class="title">GenRegCode</span><span class="params">( TCHAR  *rCode, TCHAR  *name ,<span class="keyword">int</span> len)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> code=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span>(i=<span class="number">3</span>,j=<span class="number">0</span>;i&lt;len;i++,j++)</span><br><span class="line">    &#123;<span class="keyword">if</span>(j&gt;<span class="number">7</span>) j=<span class="number">0</span>;</span><br><span class="line">      code+=((BYTE)name[i])*Table[j];</span><br><span class="line">    &#125;</span><br><span class="line">  wsprintf(name,TEXT(<span class="string">"%ld"</span>),code);</span><br><span class="line">  <span class="keyword">if</span>(lstrcmp(rCode, name)==<span class="number">0</span>)      <span class="comment">//比较真假序列号，这里为了省事，直接比较了</span></span><br><span class="line">    <span class="keyword">return</span> TRUE;</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="keyword">return</span> FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;其实一直运行下去就会发现，正确密码是根据用户名生成的，这个函数就是比对输入的密码与正确密码，如果跟踪到最后，其实是可以看到你输入的用户名对应的正确密码的。pediy对应的密码就是2470。接下来解释一下<code>wsprintf</code>这个函数：就是将数字转化为字符，<code>%ld</code>表示<code>long</code>整型。</p><p>&emsp;&emsp;根据算法还可以写一个注册机，这个还没学过，挖个坑先。</p><h2 id="三、第二个crackme"><a href="#三、第二个crackme" class="headerlink" title="三、第二个crackme"></a>三、第二个crackme</h2><p>基本分析</p><p>&emsp;&emsp;这个crackme是出自看雪论坛上的一个大佬写的新手教程，直接运行根据提示知道也是要输入用户名和注册码，成功匹配会出现一个朱茵的照片。值得注意的是输完用户名和注册码要点击内框才算开始验证（如果啥也不点就没有办法调试了）。</p><p><img alt="05_程序运行界面" style="zoom:45%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltofp3j5j30e20g33zb.jpg"></p><p>&emsp;&emsp;暂时没有什么头绪，直接丢到OD里去，查找中文字符串，凭着直觉搜索了一下<code>&quot;成功&quot;</code>和<code>&quot;失败&quot;</code>，果然找到了成功提示符，但是失败提示符莫得。</p><p><img alt="06_中文字符与关键跳转" style="zoom:67%" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1giltoutnkmj30ue0lzdjv.jpg"></p><p>&emsp;&emsp;对中文字符串的上下文基本分析，这是再一个函数里（从<code>push ebp</code>到<code>ret</code>之间），观察附近的跳转情况发现下面就有一个跳转末端，显然这个跳转会导致跳过输出成功信息。接下来就是验证猜测，设断点，调试即可。很顺利的是，确实就是这里是关键跳转。</p><h3 id="爆破法-1"><a href="#爆破法-1" class="headerlink" title="爆破法"></a>爆破法</h3><p>&emsp;&emsp;在关键跳转的地方设置断点，然后输入用户名、注册码，点击一下内框，程序会停在断点处，为了破解，可以修改状态寄存器中的<strong><code>z</code></strong>位，或者改成<code>nop</code>，都是可以的。最终页面：</p><p><img alt="07_运行成功示例" style="zoom:45%" data-src="https://tva2.sinaimg.cn/large/007EYOWmgy1giltp8rh5bj30cj0dgq5l.jpg"></p><h3 id="算法简析"><a href="#算法简析" class="headerlink" title="算法简析"></a>算法简析</h3><p>0x3E要想成功赋值到[EBX+0X30C]的话，JNZ必须不能跳转。</p><p>向上翻，找到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push ebp</span><br><span class="line">mov ebp，esp</span><br></pre></td></tr></table></figure><p>也就是函数的起始位置，下断点(其他断点清理掉，只留下这一个断点)，尝试分析这段函数</p><p>下完断点之后，发现不管是单击还是双击都没有反应，很奇怪，按理说不应该，理一下上面分析的逻辑：</p><p><strong>①比对[ESI+0X30C]和0x85，只有比对成功了才会跳转到成功的界面</strong></p><p><strong>②查找[ESI+0X30C]是怎么被赋值成功0x85的</strong>（这里是直接搜索0x85，search for &rarr; all constants）</p><p><strong>③只有[ESI+300C]和0x3E比对成功后才会将0x85赋值给[ESI+0X30C]</strong></p><p><strong>④0x3E赋值给[ESI+300C]的前一条指令JNZ必须不能跳转</strong></p><p>经过分析，重新加载程序，当注册码输入的时候，OD就断下来了，由此判断这个程序的功能是只要输入了注册码，马上就触发响应事件。一步步分析最后可以得到整个程序的通用注册码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">黑头Sun Bird+字符串(账号长度+5)+dseloffc-012-OK+字符串(账号)</span><br></pre></td></tr></table></figure><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文是一篇writeup，里面是对两个入门crackme程序的逆向分析&lt;br&gt;第一个是《加密与解密》中讲win32的API时用到的。&lt;br&gt;第二个参考博客：&lt;a href=&quot;https://bbs.pediy.com/thread-261876.htm&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;[分享]逆向破解一个简单的crackme&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="逆向入门" scheme="https://nonsense-j.top/categories/%E9%80%86%E5%90%91%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="crackme Reverse" scheme="https://nonsense-j.top/tags/crackme-Reverse/"/>
    
  </entry>
  
  <entry>
    <title>机器学习基本概念</title>
    <link href="https://nonsense-j.top/2020/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://nonsense-j.top/2020/08/04/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/</id>
    <published>2020-08-04T08:03:15.000Z</published>
    <updated>2020-08-05T10:33:57.073Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要讲述机器学习中的一些基本知识与概念的介绍，一直更新。<br>参考了知乎回答以及搜索引擎结果。</p></div><a id="more"></a><h2 id="MNIST数据集"><a href="#MNIST数据集" class="headerlink" title="MNIST数据集"></a>MNIST数据集</h2><p>&emsp;&emsp;MNIST数据集(Mixed National Institute of Standards and Technology database)是美国国家标准与技术研究院收集整理的大型手写数字数据库,包含60,000个示例的训练集以及10,000个示例的测试集。</p><ul><li><p>Training set images: train-images-idx3-ubyte.gz</p></li><li><p>Training set labels: train-labels-idx1-ubyte.gz</p></li><li><p>Test set images: t10k-images-idx3-ubyte.gz</p></li><li><p>Test set labels: t10k-labels-idx1-ubyte.gz</p></li></ul><p>&emsp;&emsp;图片都是以字节的形式存储的，要想读取可以使用python中的<code>numpy</code>库。一个图片是一个样本（对应行），而图片都是划分为</p><script type="math/tex;mode=display">lim_{1\to+\infty}P(|\frac{1}{n}\sum_i^nX_i-\mu|<\epsilon)=1, i=1,...,n</script><p>&emsp;&emsp;图片都是以字节的形式存储的，要想读取可以使用python中的<code>numpy</code>库。一个图片是一个样本（对应行）</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要讲述机器学习中的一些基本知识与概念的介绍，一直更新。&lt;br&gt;参考了知乎回答以及搜索引擎结果。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="机器学习" scheme="https://nonsense-j.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/"/>
    
      <category term="机器学习入门" scheme="https://nonsense-j.top/categories/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E5%85%A5%E9%97%A8/"/>
    
    
      <category term="Machine Learing" scheme="https://nonsense-j.top/tags/Machine-Learing/"/>
    
  </entry>
  
  <entry>
    <title>pwn：ELF保护机制</title>
    <link href="https://nonsense-j.top/2019/12/09/pwn-ELF%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/"/>
    <id>https://nonsense-j.top/2019/12/09/pwn-ELF%E4%BF%9D%E6%8A%A4%E6%9C%BA%E5%88%B6/</id>
    <published>2019-12-09T07:01:11.000Z</published>
    <updated>2020-09-07T13:07:51.113Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要讲述checksec得到的ELF文件保护机制的意义。<br>参考博客：<a href="https://www.cnblogs.com/nul1/p/10944265.html" target="_blank" rel="noopener">二进制的保护机制</a></p></div><a id="more"></a><h2 id="checksec指令"><a href="#checksec指令" class="headerlink" title="checksec指令"></a>checksec指令</h2><p>&emsp;&emsp;在CTF刷题过程中，给定一个二进制文件（ELF）,首先就要对其保护机制判断。一般使用checksec进行查看。</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">在gdb中执行：</span><br><span class="line">gdb&gt; checksec <span class="built_in">test</span></span><br><span class="line">Canary                      : No</span><br><span class="line">NX                          : Yes</span><br><span class="line">PIE                         : No</span><br><span class="line">Fortify                     : No</span><br><span class="line">RelRO                       : Partial</span><br><span class="line"></span><br><span class="line">直接在shell中执行：</span><br><span class="line">$ checksec <span class="built_in">test</span></span><br><span class="line">Arch:     i386-32-little</span><br><span class="line">RELRO:    Partial RELRO</span><br><span class="line">Stack:    No canary found</span><br><span class="line">NX:       NX enabled</span><br><span class="line">PIE:      No PIE (0x8048000)</span><br></pre></td></tr></table></figure><p>这个指令告诉了我们当前二进制文件的指令架构以及基本保护机制</p><h2 id="保护机制"><a href="#保护机制" class="headerlink" title="保护机制"></a>保护机制</h2><h3 id="Canary-———栈保护"><a href="#Canary-———栈保护" class="headerlink" title="Canary ———栈保护"></a>Canary ———栈保护</h3><p>&emsp;&emsp;这个选项表示栈保护功能有没有开启。</p><div class="note primary"><p>栈溢出保护是一种<strong>缓冲区溢出</strong>攻击缓解手段，当函数存在缓冲区溢出攻击漏洞时，攻击者可以覆盖栈上的返回地址来让 <em>shellcode</em> 能够得到执行。<br>当启用栈保护后，函数开始执行的时候会先往栈里插入<strong>cookie</strong>信息，当函数真正返回的时候会验证cookie信息是否合法，如果不合法就停止程序运行。攻击者在覆盖返回地址的时候往往也会将cookie信息给覆盖掉，导致栈保护检查失败而阻止shellcode的执行。在Linux中我们将cookie信息称为canary。</p></div><p>如果栈中开启Canary found，那么就不能用直接用溢出的方法覆盖栈中返回地址，而且要通过改写指针与局部变量、leak canary、overwrite canary的方法来绕过</p><h3 id="NX-DEP-———堆栈不可执行"><a href="#NX-DEP-———堆栈不可执行" class="headerlink" title="NX/DEP ———堆栈不可执行"></a>NX/DEP ———堆栈不可执行</h3><div class="note primary"><p>NX就是表示“not executable”，基本原理就是将数据所在内存页标识为不可执行，当程序溢出成功转入shellcode时，程序会尝试在数据页面上执行指令，此时CPU就会抛出异常，而不是去执行恶意指令。</p></div><h3 id="PIE-ASLR-———地址随机化"><a href="#PIE-ASLR-———地址随机化" class="headerlink" title="PIE/ASLR ———地址随机化"></a>PIE/ASLR ———地址随机化</h3><div class="note primary"><ul><li>0：表示关闭进程地址空间随机化。</li><li>1：表示将mmap的基址，stack和vdso页面随机化。</li><li>2：表示在1的基础上增加堆（heap）的随机化。</li></ul></div><p>&emsp;&emsp;如果进程开启这个地址随机化选项就意味着进程每次运行的时候地址都会变化，而如果没有开PIE的话那么No PIE (0x400000)，括号内的数据就是进程的基地址</p><p>&emsp;&emsp;ASLR和DEP配合使用，能有效阻止攻击者在堆栈上运行恶意代码，可以防范基于Ret2libc方式的针对DEP的攻击</p><h3 id="Fortify"><a href="#Fortify" class="headerlink" title="Fortify"></a>Fortify</h3><p>FORTIFY_SOURCE机制对格式化字符串有两个限制：<br></p><div class="note primary"><ol><li>包含%n的格式化字符串不能位于进程内存中的可写地址。</li><li>当使用位置参数时，必须使用范围内的所有参数。所以如果要使用%7$x，你必须同时使用1,2,3,4,5和6</li></ol></div><p></p><h3 id="RelRO"><a href="#RelRO" class="headerlink" title="RelRO"></a>RelRO</h3><p>&emsp;&emsp;在Linux系统安全领域数据可以写的存储区就会是攻击的目标，尤其是存储函数指针的区域。 所以在安全防护的角度来说尽量减少可写的存储区域对安全会有极大的好处。</p><p>&emsp;&emsp;GCC, GNU linker以及Glibc-dynamic linker一起配合实现了一种叫做relro的技术: read only relocation。大概实现就是由linker指定binary的一块经过dynamic linker处理过 relocation之后的区域为只读。</p><p>&emsp;&emsp;设置符号重定向表格为只读或在进程启动时就解析并绑定所有动态符号，从而减少对GOT（Global Offset Table）攻击。RELRO为“Partial RELRO”，说明对GOT表具有写权限。如果开启FULL RELRO，意味着我们无法修改got表。</p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要讲述checksec得到的ELF文件保护机制的意义。&lt;br&gt;参考博客：&lt;a href=&quot;https://www.cnblogs.com/nul1/p/10944265.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;二进制的保护机制&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="二进制安全" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="Pwn学习" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Pwn" scheme="https://nonsense-j.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>pwn：格式化字符串漏洞</title>
    <link href="https://nonsense-j.top/2019/11/23/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/"/>
    <id>https://nonsense-j.top/2019/11/23/pwn-%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E/</id>
    <published>2019-11-23T13:29:45.000Z</published>
    <updated>2020-09-07T13:07:38.177Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本 pwn 例题基于攻防世界一道关于格式化字符串漏洞的<a href="https://adworld.xctf.org.cn/task/answer?type=pwn&amp;number=2&amp;grade=0&amp;id=5050&amp;page=1" target="_blank" rel="noopener">新手题</a><br>参考博客： <a href="https://www.anquanke.com/post/id/85785" target="_blank" rel="noopener">原理详解-安全客</a> <a href="https://veritas501.space/2017/04/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/" target="_blank" rel="noopener">具体实现-</a></p></div><a id="more"></a><h2 id="基本知识"><a href="#基本知识" class="headerlink" title="基本知识"></a>基本知识</h2><h3 id="格式化字符"><a href="#格式化字符" class="headerlink" title="格式化字符"></a>格式化字符</h3><div class="note primary"><p>%d - 十进制 - 输出十进制整数<br>%s - 字符串 - 从<strong>内存</strong>中读取字符串<br>%c - 字符 - 输出字符<br>%x - 十六进制 - 输出十六进制数<br>%p - 指针 - 指针地址，输出不够 8 位就左边补零<br>%n - 输出在此之前输出的字符数</p></div><h3 id="什么是格式化字符串漏洞"><a href="#什么是格式化字符串漏洞" class="headerlink" title="什么是格式化字符串漏洞"></a>什么是格式化字符串漏洞</h3><div class="note default"><p>格式化字符串漏洞的解释为“软件使用了格式化字符串作为参数，且该格式化字符串来自外部输入”。会触发该漏洞的函数很有限，主要就是 printf、sprintf、fprintf 等 print 家族函数。</p></div><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">printf</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span> *format, ...)</span></span>;</span><br></pre></td></tr></table></figure><p>在这个函数中一旦没有注明 format 格式，由于printf允许参数个数不固定，故printf会自动将这段字符当作format参数，而用其后内存中的数据匹配format参数。例如：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">char</span> str[<span class="number">100</span>];</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>,str);</span><br><span class="line"><span class="built_in">printf</span>(str)</span><br></pre></td></tr></table></figure><p>在这一段代码中 str 来自于用户的可控输入，用户完全可以在输入时嵌入格式化字符(%s,%n之类)，</p><p><img alt="stack1.png" data-src="https://i.loli.net/2019/11/24/lsPE2LzMuCd3oyF.png"></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本 pwn 例题基于攻防世界一道关于格式化字符串漏洞的&lt;a href=&quot;https://adworld.xctf.org.cn/task/answer?type=pwn&amp;amp;number=2&amp;amp;grade=0&amp;amp;id=5050&amp;amp;page=1&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;新手题&lt;/a&gt;&lt;br&gt;参考博客： &lt;a href=&quot;https://www.anquanke.com/post/id/85785&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;原理详解-安全客&lt;/a&gt; &lt;a href=&quot;https://veritas501.space/2017/04/28/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E6%BC%8F%E6%B4%9E%E5%AD%A6%E4%B9%A0/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;具体实现-&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="二进制安全" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/"/>
    
      <category term="Pwn学习" scheme="https://nonsense-j.top/categories/%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AE%89%E5%85%A8/Pwn%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Pwn" scheme="https://nonsense-j.top/tags/Pwn/"/>
    
  </entry>
  
  <entry>
    <title>Hexo操作记录</title>
    <link href="https://nonsense-j.top/2019/11/22/Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/"/>
    <id>https://nonsense-j.top/2019/11/22/Hexo%E6%93%8D%E4%BD%9C%E8%AE%B0%E5%BD%95/</id>
    <published>2019-11-21T17:41:22.000Z</published>
    <updated>2020-09-07T16:49:50.801Z</updated>
    
    <content type="html"><![CDATA[<!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --><div class="note info no-icon"><p>本文主要记录本人在配置博客时的一些基本操作，以及自定义博客的注意事项。<br>仅用于自己查询。</p></div><a id="more"></a><h3 id="Hexo配置"><a href="#Hexo配置" class="headerlink" title="Hexo配置"></a>Hexo配置</h3><h4 id="对整个hexo项目的个人理解"><a href="#对整个hexo项目的个人理解" class="headerlink" title="对整个hexo项目的个人理解"></a>对整个hexo项目的个人理解</h4><p>&emsp;&emsp;总的配置文件有两个，都叫做<code>_config.yml</code>，一个是<code>hexo</code>的配置文件（总配置文件），一个是<code>next</code>主题的配置文件（主题配置文件）。在总配置文件中定义的是博客基本信息，包括博主基本信息，侧栏头像，部署在哪，以及全局的一些插件（搜索，neat压缩，seo设置）；在主题配置文件中主要是主题的一些特性设置，主要是说明了页面的具体排布（指定了<code>myblog/source/_data/styles.styl</code>）以及一些页面上用到的插件（js）等等。<br>&emsp;&emsp;在<code>style.styl</code>中可以对页面格式进行直接调整，可以使用浏览器<code>F12</code>辅助，用到的都是基本的<code>css</code>知识。但其实页面的基础控制在<code>myblog/themes/next/source/css/_variables/base.styl</code>中，包括全局字体，字体大小，行距等等，在这里一般修改全局的设置，找到对应项改变<br>即可。<br>&emsp;&emsp;页面使用到的图片都在next主题目录中定义，定位图片：<code>/images/avatar.jpeg</code>。</p><h4 id="主页文章按照修改时间进行排序"><a href="#主页文章按照修改时间进行排序" class="headerlink" title="主页文章按照修改时间进行排序"></a>主页文章按照修改时间进行排序</h4><div class="note warning no-icon"><p>没有用的操作：找到主配置文件 _config.yml，然后修改 index_generator 的 order_by 为 -updated</p></div><p>正确方法是找到<code>node_modules/hexo-generator-index-pin-top/lib/generator.js</code>添加以下代码（<a href="https://gsy00517.github.io/hexo20200207151318/" target="_blank" rel="noopener">原文链接</a>）</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">'use strict'</span>;</span><br><span class="line"><span class="keyword">var</span> pagination = <span class="built_in">require</span>(<span class="string">'hexo-pagination'</span>);</span><br><span class="line"><span class="built_in">module</span>.exports = <span class="function"><span class="keyword">function</span>(<span class="params">locals</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">var</span> config = <span class="keyword">this</span>.config;</span><br><span class="line">  <span class="keyword">var</span> posts = locals.posts;</span><br><span class="line">    posts.data = posts.data.sort(<span class="function"><span class="keyword">function</span>(<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(a.top &amp;&amp; b.top) &#123; <span class="comment">// 当两篇文章top都有定义时</span></span><br><span class="line">            <span class="keyword">if</span>(a.top == b.top) <span class="keyword">return</span> b.updated - a.updated; <span class="comment">// 若top值一样，则按照文章更新日期降序排列</span></span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> b.top - a.top; <span class="comment">// 否则按照top值降序排列</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(a.top &amp;&amp; !b.top) &#123; <span class="comment">// 以下两种情况是若只有一篇文章top有定义，则将有top的排在前面（这里用异或操作居然不行233）</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(!a.top &amp;&amp; b.top) &#123; <span class="comment">//上一条已解释</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">return</span> b.updated - a.updated; <span class="comment">// 若都没定义，则按照文章更新日期降序排列</span></span><br><span class="line">    &#125;);</span><br><span class="line">  <span class="keyword">var</span> paginationDir = config.pagination_dir || <span class="string">'page'</span>;</span><br><span class="line">  <span class="keyword">return</span> pagination(<span class="string">''</span>, posts, &#123;</span><br><span class="line">    perPage: config.index_generator.per_page,</span><br><span class="line">    layout: [<span class="string">'index'</span>, <span class="string">'archive'</span>],</span><br><span class="line">    format: paginationDir + <span class="string">'/%d/'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      __index: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="修改全局字体或者局部字体"><a href="#修改全局字体或者局部字体" class="headerlink" title="修改全局字体或者局部字体"></a>修改全局字体或者局部字体</h4><p>&emsp;&emsp;这里的字体都是自定义字体，不是<code>google fonts</code>，方式就是在<code>base.styl</code>或者<code>style.styl</code>中定义字体引入</p><figure class="highlight styl"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@font-face &#123;</span><br><span class="line">    <span class="comment">/* 字体名称随意起 */</span></span><br><span class="line">    <span class="attribute">font-family</span>: zzAw;</span><br><span class="line">    <span class="comment">/*你下载字体所在的位置*/</span></span><br><span class="line">    src: url('/fonts/zzAw.ttf');</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;如果要使用字体只要在相应css层中改变<code>font-family</code>即可，全局字体就是直接改变<code>base.styl</code>。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Font families.</span></span><br><span class="line">$font-family-chinese      = zzAw, sans-serif; // 没有zzAw的情况下选用sans-serif字体</span><br></pre></td></tr></table></figure><h3 id="Hexo写作"><a href="#Hexo写作" class="headerlink" title="Hexo写作"></a>Hexo写作</h3><h4 id="首页显示"><a href="#首页显示" class="headerlink" title="首页显示"></a>首页显示</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tags: [Machine Learing] // 添加多个标签</span><br><span class="line">/<span class="emphasis">* 添加子目录，下面的是上面的子目录 *</span>/</span><br><span class="line">categories: </span><br><span class="line"><span class="bullet">  - </span>机器学习</span><br><span class="line"><span class="bullet">  - </span>机器学习入门</span><br><span class="line"><span class="xml"><span class="comment">&lt;!-- more --&gt;</span></span> // 表示到这里折叠</span><br></pre></td></tr></table></figure><h4 id="首行缩进"><a href="#首行缩进" class="headerlink" title="首行缩进"></a>首行缩进</h4><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&amp;emsp;&amp;emsp;</span><br></pre></td></tr></table></figure><h4 id="四种特殊的书写格式"><a href="#四种特殊的书写格式" class="headerlink" title="四种特殊的书写格式"></a>四种特殊的书写格式</h4><p><img alt="四种格式" data-src="https://tvax2.sinaimg.cn/large/007EYOWmgy1ghevn3nn34j30ot05qmx5.jpg"></p><figure class="highlight md"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;% note [class] [no-icon] %&#125;</span><br><span class="line">Any content (support inline tags too.io).</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">[class]   : default | primary | success | info | warning | danger.</span><br></pre></td></tr></table></figure><h3 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h3><h4 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h4 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br><span class="line">$ hexo s</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h4 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br><span class="line">$ hexo g</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h4 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p><!-- rebuild by neat -->]]></content>
    
    <summary type="html">
    
      &lt;!-- build time:Mon Mar 08 2021 16:09:44 GMT+0800 (GMT+08:00) --&gt;&lt;div class=&quot;note info no-icon&quot;&gt;&lt;p&gt;本文主要记录本人在配置博客时的一些基本操作，以及自定义博客的注意事项。&lt;br&gt;仅用于自己查询。&lt;/p&gt;&lt;/div&gt;
    
    </summary>
    
    
      <category term="博客设置" scheme="https://nonsense-j.top/categories/%E5%8D%9A%E5%AE%A2%E8%AE%BE%E7%BD%AE/"/>
    
    
      <category term="Hexo" scheme="https://nonsense-j.top/tags/Hexo/"/>
    
  </entry>
  
</feed>
